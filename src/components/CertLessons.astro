---
import { readFile } from 'node:fs/promises';

export interface Props {
  code: string;
  certTitle: string;
}

type RawSearchPage = {
  title?: string;
  url?: string;
  category?: string;
  section?: string;
  icon?: string;
  status?: string;
  order?: number;
  Certificado?: string;
  certificado?: string;
  lession?: string | number;
  lesson?: string | number;
};

type PageItem = {
  title: string;
  url: string;
  category?: string;
  section?: string;
  icon?: string;
  status?: string;
  order?: number;
  certificado?: string;
  lession?: string | number;
};

const { code, certTitle } = Astro.props as Props;

const fileUrl = new URL('../../public/search-index.json', import.meta.url);
const jsonText = await readFile(fileUrl, 'utf-8');
const data: { pages?: RawSearchPage[] } = JSON.parse(jsonText);

const pages: PageItem[] = (data?.pages ?? []).map((p: RawSearchPage): PageItem => ({
  title: p.title ?? '',
  url: p.url ?? '#',
  category: p.category,
  section: p.section,
  icon: p.icon,
  status: p.status,
  order: p.order ?? 0,
  certificado: p.Certificado || p.certificado || '',
  lession: p.lession ?? p.lesson
}));

function parseLesson(val: string | number | undefined): number {
  if (val === undefined || val === null) return Number.MAX_SAFE_INTEGER;
  const n = Number(String(val).replace(/[^0-9.]/g, ''));
  return Number.isNaN(n) ? Number.MAX_SAFE_INTEGER : n;
}

const matched: PageItem[] = pages.filter((p: PageItem) =>
  (p.certificado ?? '').toLowerCase().includes(certTitle.toLowerCase()) ||
  (p.section ?? '').toLowerCase().includes(code.toLowerCase()) ||
  (p.url ?? '').toLowerCase().includes(code.toLowerCase())
);

const lessons: PageItem[] = matched.sort((a: PageItem, b: PageItem) => {
  const la = parseLesson(a.lession);
  const lb = parseLesson(b.lession);
  if (la !== lb) return la - lb;
  if ((a.order ?? 0) !== (b.order ?? 0)) return (a.order ?? 0) - (b.order ?? 0);
  return (a.title ?? '').localeCompare(b.title ?? '');
});
---

<div class="cert-page">
  <header class="cert-hero">
    <div class="cert-code">{code}</div>
    <h1 class="cert-title">{certTitle}</h1>
    <p class="cert-sub">GuÃ­a de estudio por lecciones</p>
  </header>

  {lessons.length === 0 ? (
    <div class="empty">No se encontraron lecciones para este certificado.</div>
  ) : (
    <section class="lessons">
      {lessons.map((item: PageItem) => (
        <a class="lesson" href={item.url}>
          <div class="lesson-left">
            <span class="lesson-icon">{item.icon || 'ðŸ“˜'}</span>
            <div class="lesson-info">
              <h3 class="lesson-title">{item.lession ? `LecciÃ³n ${item.lession}: ` : ''}{item.title}</h3>
              <p class="lesson-meta">{item.category} â€¢ {item.section}</p>
            </div>
          </div>
          <div class="lesson-right">
            <span class={`status ${item.status}`}>{item.status || 'planned'}</span>
            <span class="arrow">â†’</span>
          </div>
        </a>
      ))}
    </section>
  )}
</div>

<style is:global>
  .cert-page { padding: 24px; }
  .cert-hero { text-align: center; margin: 12px 0 24px; }
  .cert-code { display:inline-block; padding:6px 12px; border:1px solid rgba(148,163,184,.3); border-radius:999px; font-size:.85rem; color:#475569; background:rgba(241,245,249,.6) }
  .cert-title { font-size:1.8rem; margin:10px 0 6px; color:#0f172a }
  .cert-sub { color:#64748b; }
  .lessons { display:flex; flex-direction:column; gap:10px; max-width:900px; margin:0 auto; }
  .lesson { display:flex; align-items:center; justify-content:space-between; gap:12px; padding:14px 16px; border:1px solid rgba(148,163,184,.25); background:linear-gradient(135deg, rgba(255,255,255,.85), rgba(248,250,252,.9)); border-radius:14px; text-decoration:none; transition:transform .2s ease, box-shadow .2s ease, border-color .2s ease; }
  .lesson:hover { transform: translateY(-2px); box-shadow:0 8px 24px rgba(15,23,42,.08); border-color: rgba(148,163,184,.45); }
  .lesson-left { display:flex; align-items:center; gap:12px; }
  .lesson-icon { font-size:1.4rem }
  .lesson-info { display:flex; flex-direction:column }
  .lesson-title { margin:0; color:#0f172a; font-size:1rem }
  .lesson-meta { margin:2px 0 0; color:#64748b; font-size:.85rem }
  .lesson-right { display:flex; align-items:center; gap:10px }
  .status { padding:4px 10px; border-radius:999px; font-size:.75rem; text-transform:uppercase; letter-spacing:.02em; border:1px solid rgba(148,163,184,.35); color:#475569; background:rgba(241,245,249,.6) }
  .status.completed { background: rgba(34,197,94,.15); color:#166534; border-color: rgba(34,197,94,.35) }
  .status.interactive { background: rgba(59,130,246,.15); color:#1d4ed8; border-color: rgba(59,130,246,.35) }
  .status.planned { background: rgba(148,163,184,.2); color:#334155 }
  .arrow { color:#334155; font-size:1.25rem }
  .empty { text-align:center; color:#64748b; padding:40px 0 }
  @media (max-width: 640px) { .lesson { padding:12px } .cert-title{font-size:1.5rem} }
</style>


