---
// navbar
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';
import HubCategorias from '../components/hub-categorias.astro';
import HubCertificaciones from '../components/hub-certificaciones.astro';
import TechStats from '../components/tech-stats.astro';

---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Mi Base de Conocimiento</title>
    <meta name="description" content="Dashboard personal de estudios y conocimiento t√©cnico">
</head>
<body>
    <Navbar />
    <div class="dashboard-page">
        <div class="container">
            <!-- Quick Access Bar -->
            <div class="quick-access-bar">
                <div class="search-container">
                    <div class="search-box">
                        <svg class="search-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                        <input type="text" id="searchInput" placeholder="Buscar en mi knowledge base..." />
                        <kbd class="search-shortcut">Ctrl K</kbd>
                    </div>
                </div>
                <div class="quick-actions">
                    <a href="https://cheat.villaarreola.com" class="action-btn lab">
                       üîé Cheats Sheets 
                    </a>
                    <a href="https://cft.villaarreola.com" class="action-btn study">
                       üìù CFT WriteUps
                    </a>
                    <!-- <button class="action-btn notes" onclick="toggleNotes()">
                        üìù Notas R√°pidas
                    </button> -->
                </div>
            </div>

            <!-- Technologies & Stats - Componente -->
            <TechStats />

            <!-- Content Tabs -->
            <div class="content-tabs">
                <div class="tab-switcher">
                    <button class="tab-btn active" data-tab="categories">üìö Categor√≠as</button>
                    <button class="tab-btn" data-tab="certifications">üéì Certificaciones</button>
                </div>
                
                <div class="tab-content">
                    <!-- Categor√≠as Tab - Componente -->
                    <div id="categories-tab" class="tab-panel active">
                        <HubCategorias />
                    </div>

                    <!-- Certificaciones Tab - Componente -->
                    <div id="certifications-tab" class="tab-panel">
                        <HubCertificaciones />
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Footer General -->
    <Footer />

<script> 



    // B√∫squeda funcional con JSON
let searchIndex = [];
let searchResults = [];

// Cargar √≠ndice de b√∫squeda
async function loadSearchIndex() {
    try {
        const response = await fetch('/search-index.json');
        const data = await response.json();
        searchIndex = data.pages;
        console.log('√çndice de b√∫squeda cargado:', searchIndex.length, 'p√°ginas');
    } catch (error) {
        console.error('Error cargando √≠ndice de b√∫squeda:', error);
    }
}

// Funci√≥n para destacar t√©rminos de b√∫squeda
function highlightSearchTerms(text, query) {
    if (!query || query.length < 2) return text;
    
    const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
    return text.replace(regex, '<mark class="search-highlight">$1</mark>');
}

// Calcular score de relevancia
function calculateRelevanceScore(page, query) {
    const normalizedQuery = query.toLowerCase();
    let score = 0;
    
    // T√≠tulo exacto (m√°xima prioridad)
    if (page.title.toLowerCase() === normalizedQuery) score += 100;
    else if (page.title.toLowerCase().includes(normalizedQuery)) score += 50;
    
    // Tags exactos
    const exactTagMatch = page.tags.some(tag => tag.toLowerCase() === normalizedQuery);
    if (exactTagMatch) score += 30;
    else {
        const partialTagMatch = page.tags.some(tag => tag.toLowerCase().includes(normalizedQuery));
        if (partialTagMatch) score += 15;
    }
    
    // Categor√≠a
    if (page.category.toLowerCase().includes(normalizedQuery)) score += 20;
    
    // Descripci√≥n
    if (page.description.toLowerCase().includes(normalizedQuery)) score += 10;
    
    return score;
}

// Realizar b√∫squeda avanzada
function performSearch(query) {
    if (!query || query.length < 2) {
        hideSearchResults();
        return [];
    }
    
    const normalizedQuery = query.toLowerCase();
    
    const results = searchIndex.filter(page => {
        // Buscar en t√≠tulo
        const titleMatch = page.title.toLowerCase().includes(normalizedQuery);
        
        // Buscar en descripci√≥n
        const descMatch = page.description.toLowerCase().includes(normalizedQuery);
        
        // Buscar en tags
        const tagMatch = page.tags.some(tag => 
            tag.toLowerCase().includes(normalizedQuery)
        );
        
        // Buscar en categor√≠a
        const categoryMatch = page.category.toLowerCase().includes(normalizedQuery);
        
        return titleMatch || descMatch || tagMatch || categoryMatch;
    });
    
    // Calcular relevancia y ordenar
    const rankedResults = results.map(page => ({
        ...page,
        relevanceScore: calculateRelevanceScore(page, normalizedQuery),
        highlightedTitle: highlightSearchTerms(page.title, query),
        highlightedDescription: highlightSearchTerms(page.description, query),
        matchedTags: page.tags.filter(tag => 
            tag.toLowerCase().includes(normalizedQuery)
        ).map(tag => highlightSearchTerms(tag, query))
    }));
    
    // Ordenar por relevancia
    rankedResults.sort((a, b) => b.relevanceScore - a.relevanceScore);
    
    return rankedResults.slice(0, 6); // M√°ximo 6 resultados
}

// Mostrar resultados de b√∫squeda avanzados
function showSearchResults(results) {
    let resultsContainer = document.getElementById('searchResults');
    
    // Crear contenedor si no existe
    if (!resultsContainer) {
        resultsContainer = document.createElement('div');
        resultsContainer.id = 'searchResults';
        resultsContainer.className = 'search-results-modern';
        
        const searchContainer = document.querySelector('.search-container');
        searchContainer.appendChild(resultsContainer);
    }
    
    // Limpiar resultados anteriores
    resultsContainer.innerHTML = '';
    
    if (results.length === 0) {
        resultsContainer.innerHTML = `
            <div class="search-result no-results">
                <div class="no-results-content">
                    <div class="no-results-icon">üîç</div>
                    <div class="no-results-text">
                        <div class="no-results-title">No se encontraron resultados</div>
                        <div class="no-results-description">Intenta con otros t√©rminos de b√∫squeda</div>
                    </div>
                </div>
            </div>
        `;
        resultsContainer.style.display = 'block';
        return;
    }
    
    // Agregar header con contador de resultados
    const headerElement = document.createElement('div');
    headerElement.className = 'search-results-header';
    headerElement.innerHTML = `
        <div class="results-count">
            <span class="count-number">${results.length}</span>
            <span class="count-text">resultado${results.length !== 1 ? 's' : ''} encontrado${results.length !== 1 ? 's' : ''}</span>
        </div>
    `;
    resultsContainer.appendChild(headerElement);
    
    // Agrupar por categor√≠a
    const groupedResults = {};
    results.forEach(result => {
        if (!groupedResults[result.category]) {
            groupedResults[result.category] = [];
        }
        groupedResults[result.category].push(result);
    });
    
    // Mostrar resultados agrupados
    Object.entries(groupedResults).forEach(([category, categoryResults]) => {
        // Header de categor√≠a si hay m√∫ltiples categor√≠as
        if (Object.keys(groupedResults).length > 1) {
            const categoryHeader = document.createElement('div');
            categoryHeader.className = 'category-header';
            categoryHeader.innerHTML = `
                <div class="category-title">${category}</div>
                <div class="category-count">${categoryResults.length}</div>
            `;
            resultsContainer.appendChild(categoryHeader);
        }
        
        // Resultados de la categor√≠a
        categoryResults.forEach((result, index) => {
            const resultElement = document.createElement('a');
            resultElement.href = result.url;
            resultElement.className = `search-result ${index === 0 && Object.keys(groupedResults).length === 1 ? 'first-result' : ''}`;
            
            // Tags coincidentes
            const matchedTagsHtml = result.matchedTags.length > 0 ? `
                <div class="result-tags">
                    ${result.matchedTags.map(tag => `<span class="result-tag">${tag}</span>`).join('')}
                </div>
            ` : '';
            
            // Score de relevancia (solo para debugging, oculto en producci√≥n)
            const scoreIndicator = result.relevanceScore > 50 ? 'high' : result.relevanceScore > 20 ? 'medium' : 'low';
            
            resultElement.innerHTML = `
                <div class="result-icon-container">
                    <div class="result-icon">${result.icon}</div>
                    <div class="relevance-indicator ${scoreIndicator}"></div>
                </div>
                <div class="result-content">
                    <div class="result-title">${result.highlightedTitle}</div>
                    <div class="result-category-badge">${result.category}</div>
                    <div class="result-description">${result.highlightedDescription}</div>
                    ${matchedTagsHtml}
                </div>
                <div class="result-arrow">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                </div>
            `;
            
            resultsContainer.appendChild(resultElement);
        });
    });
    
    resultsContainer.style.display = 'block';
}

// Ocultar resultados
function hideSearchResults() {
    const resultsContainer = document.getElementById('searchResults');
    if (resultsContainer) {
        resultsContainer.style.display = 'none';
    }
}

// Limpiar b√∫squeda
function clearSearch() {
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.value = '';
        hideSearchResults();
    }
}

// Event listeners para b√∫squeda
function initializeSearch() {
    const searchInput = document.getElementById('searchInput');
    
    if (!searchInput) return;
    
    // B√∫squeda en tiempo real
    searchInput.addEventListener('input', function(e) {
        const query = e.target.value.trim();
        const results = performSearch(query);
        
        if (query.length >= 2) {
            showSearchResults(results);
        } else {
            hideSearchResults();
        }
    });
    
    // Navegaci√≥n con teclado
    searchInput.addEventListener('keydown', function(e) {
        const resultsContainer = document.getElementById('searchResults');
        
        if (!resultsContainer || resultsContainer.style.display === 'none') return;
        
        const results = resultsContainer.querySelectorAll('.search-result');
        const currentActive = resultsContainer.querySelector('.search-result.active');
        
        let activeIndex = currentActive ? 
            Array.from(results).indexOf(currentActive) : -1;
        
        switch(e.key) {
            case 'ArrowDown':
                e.preventDefault();
                activeIndex = Math.min(activeIndex + 1, results.length - 1);
                break;
            case 'ArrowUp':
                e.preventDefault();
                activeIndex = Math.max(activeIndex - 1, 0);
                break;
            case 'Enter':
                e.preventDefault();
                if (activeIndex >= 0 && results[activeIndex]) {
                    const href = (results[activeIndex] as HTMLAnchorElement).href;
                    if (href) window.location.href = href;
                }
                return;
            case 'Escape':
                clearSearch();
                searchInput.blur();
                return;
        }
        
        // Actualizar clase active
        results.forEach((result, index) => {
            result.classList.toggle('active', index === activeIndex);
        });
    });
    
    // Cerrar al hacer click fuera
    document.addEventListener('click', function(e) {
        const searchContainer = document.querySelector('.search-container');
        if (!searchContainer.contains(e.target)) {
            hideSearchResults();
        }
    });
}

// Funci√≥n para actualizar funciones existentes
function toggleNotes() {
    alert('Funci√≥n de notas r√°pidas en desarrollo üìù');
}

function focusSearch() {
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    if (searchInput) {
        searchInput.focus();
        if (searchInput.select) {
            searchInput.select();
        }
    }
}

// Tab switching functionality
function switchTab(tabName) {
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-panel').forEach(panel => panel.classList.remove('active'));
    
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    document.getElementById(`${tabName}-tab`).classList.add('active');
}

// Inicializaci√≥n
document.addEventListener('DOMContentLoaded', function() {
    // Cargar √≠ndice de b√∫squeda
    loadSearchIndex();
    
    // Inicializar b√∫squeda
    initializeSearch();
    
    // B√∫squeda con Ctrl+K
    document.addEventListener('keydown', function(e) {
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
            e.preventDefault();
            focusSearch();
        }
    });
    
    // Tab click handlers
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const tabName = this.getAttribute('data-tab');
            switchTab(tabName);
        });
    });
});



</script>

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    
    .dashboard-page {
        background: 
    repeating-linear-gradient(45deg, transparent, transparent 2px, rgba(255,255,255,0.03) 2px, rgba(255,255,255,0.03) 4px),
    linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
        min-height: 100vh;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    /* Agregar al <style> del index.astro */

/* Modern Search Results */
.search-container {
    position: relative;
}

.search-results-modern {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
    border-radius: 1rem;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.4);
    border: 1px solid rgba(148, 163, 184, 0.2);
    z-index: 1000;
    max-height: 500px;
    overflow-y: auto;
    margin-top: 12px;
    display: none;
    backdrop-filter: blur(20px);
    overflow: hidden;
}

.search-results-header {
    padding: 1rem 1.25rem 0.5rem;
    border-bottom: 1px solid rgba(148, 163, 184, 0.1);
    margin-bottom: 0.5rem;
}

.results-count {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #cbd5e1;
    font-size: 0.875rem;
}

.count-number {
    background: linear-gradient(45deg, #3b82f6, #8b5cf6);
    color: white;
    padding: 0.125rem 0.5rem;
    border-radius: 0.5rem;
    font-weight: 600;
    font-size: 0.75rem;
}

.count-text {
    color: #94a3b8;
}

.category-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem 1.25rem 0.5rem;
    margin: 0.5rem 0;
    border-top: 1px solid rgba(148, 163, 184, 0.1);
}

.category-title {
    color: #f1f5f9;
    font-weight: 600;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.category-count {
    background: rgba(59, 130, 246, 0.2);
    color: #93c5fd;
    padding: 0.125rem 0.5rem;
    border-radius: 0.375rem;
    font-size: 0.75rem;
    font-weight: 500;
}

.search-result {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem 1.25rem;
    text-decoration: none;
    color: inherit;
    border-bottom: 1px solid rgba(148, 163, 184, 0.1);
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
    overflow: hidden;
}

.search-result::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, rgba(59, 130, 246, 0.05), rgba(139, 92, 246, 0.05));
    opacity: 0;
    transition: opacity 0.3s ease;
}

.search-result:hover::before,
.search-result.active::before {
    opacity: 1;
}

.search-result:hover,
.search-result.active {
    transform: translateX(8px);
    border-color: rgba(59, 130, 246, 0.3);
}

.search-result:last-child {
    border-bottom: none;
    border-radius: 0 0 1rem 1rem;
}

.search-result.first-result {
    background: linear-gradient(45deg, rgba(16, 185, 129, 0.1), rgba(6, 182, 212, 0.1));
    border-left: 3px solid #10b981;
}

.search-result.no-results {
    cursor: default;
    border: none;
    justify-content: center;
    padding: 2rem;
}

.search-result.no-results::before {
    display: none;
}

.search-result.no-results:hover {
    transform: none;
}

.no-results-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    text-align: center;
}

.no-results-icon {
    font-size: 3rem;
    opacity: 0.5;
}

.no-results-title {
    color: #f1f5f9;
    font-weight: 600;
    font-size: 1.125rem;
}

.no-results-description {
    color: #94a3b8;
    font-size: 0.875rem;
}

.result-icon-container {
    position: relative;
    flex-shrink: 0;
}

.result-icon {
    font-size: 1.5rem;
    width: 3rem;
    height: 3rem;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(139, 92, 246, 0.2));
    border-radius: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid rgba(59, 130, 246, 0.3);
    position: relative;
    overflow: hidden;
}

.result-icon::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
    transform: translateX(-100%) translateY(-100%) rotate(45deg);
    transition: transform 0.6s ease;
}

.search-result:hover .result-icon::before {
    transform: translateX(100%) translateY(100%) rotate(45deg);
}

.relevance-indicator {
    position: absolute;
    top: -2px;
    right: -2px;
    width: 0.75rem;
    height: 0.75rem;
    border-radius: 50%;
    border: 2px solid #1e293b;
}

.relevance-indicator.high {
    background: #10b981;
}

.relevance-indicator.medium {
    background: #f59e0b;
}

.relevance-indicator.low {
    background: #64748b;
}

.result-content {
    flex: 1;
    min-width: 0;
    position: relative;
    z-index: 1;
}

.result-title {
    font-weight: 600;
    color: #f8fafc;
    margin-bottom: 0.375rem;
    font-size: 1rem;
    line-height: 1.4;
}

.result-category-badge {
    display: inline-block;
    background: linear-gradient(45deg, rgba(59, 130, 246, 0.2), rgba(139, 92, 246, 0.2));
    color: #93c5fd;
    padding: 0.125rem 0.5rem;
    border-radius: 0.375rem;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 0.5rem;
    border: 1px solid rgba(59, 130, 246, 0.3);
}

.result-description {
    font-size: 0.875rem;
    color: #cbd5e1;
    line-height: 1.5;
    margin-bottom: 0.5rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.result-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
    margin-top: 0.5rem;
}

.result-tag {
    background: rgba(16, 185, 129, 0.1);
    color: #34d399;
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.7rem;
    font-weight: 500;
    border: 1px solid rgba(16, 185, 129, 0.3);
}

.result-arrow {
    color: #64748b;
    transition: all 0.3s ease;
    flex-shrink: 0;
}

.search-result:hover .result-arrow {
    color: #93c5fd;
    transform: translateX(4px);
}

.search-highlight {
    background: linear-gradient(45deg, #fbbf24, #f59e0b);
    color: #1e293b;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-weight: 600;
    box-shadow: 0 0 0 1px rgba(245, 158, 11, 0.3);
}

/* Scrollbar para resultados */
.search-results-modern::-webkit-scrollbar {
    width: 6px;
}

.search-results-modern::-webkit-scrollbar-track {
    background: rgba(148, 163, 184, 0.1);
}

.search-results-modern::-webkit-scrollbar-thumb {
    background: rgba(148, 163, 184, 0.3);
    border-radius: 3px;
}

.search-results-modern::-webkit-scrollbar-thumb:hover {
    background: rgba(148, 163, 184, 0.5);
}

/* Search Input Enhanced */
.search-box input {
    transition: all 0.3s ease;
}

.search-box input:focus {
    outline: none;
    border-color: rgba(255, 255, 255, 0.5);
    background: rgba(255, 255, 255, 0.15);
    box-shadow: 0 0 0 4px rgba(255, 255, 255, 0.1);
}

/* Responsive Search */
@media (max-width: 768px) {
    .search-results {
        left: -10px;
        right: -10px;
        margin-top: 5px;
    }
    
    .search-result {
        padding: 12px 15px;
    }
    
    .result-icon {
        width: 35px;
        height: 35px;
        font-size: 1.3em;
    }
    
    .result-title {
        font-size: 0.9em;
    }
    
    .result-description {
        font-size: 0.8em;
    }
}

@media (max-width: 480px) {
    .search-results {
        max-height: 300px;
    }
    
    .search-result {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
        text-align: left;
    }
    
    .result-icon {
        align-self: center;
    }
}
    
    /* Quick Access Bar */
    .quick-access-bar {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 20px;
        margin-bottom: 30px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        display: flex;
        align-items: center;
        gap: 20px;
        flex-wrap: wrap;
    }

    .search-container {
        flex: 1;
        min-width: 300px;
    }

    .search-box {
        position: relative;
        display: flex;
        align-items: center;
    }

    .search-icon {
        position: absolute;
        left: 15px;
        width: 20px;
        height: 20px;
        color: rgba(255, 255, 255, 0.6);
        z-index: 2;
    }

    .search-box input {
        width: 100%;
        padding: 12px 45px 12px 45px;
        background: rgba(255, 255, 255, 0.1);
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 25px;
        color: white;
        font-size: 16px;
        transition: all 0.3s ease;
    }

    .search-box input::placeholder {
        color: rgba(255, 255, 255, 0.6);
    }

    .search-box input:focus {
        outline: none;
        border-color: rgba(255, 255, 255, 0.5);
        background: rgba(255, 255, 255, 0.15);
        box-shadow: 0 0 0 4px rgba(255, 255, 255, 0.1);
    }

    .search-shortcut {
        position: absolute;
        right: 12px;
        background: rgba(255, 255, 255, 0.2);
        color: rgba(255, 255, 255, 0.8);
        padding: 4px 8px;
        border-radius: 6px;
        font-size: 12px;
        font-family: monospace;
    }

    .quick-actions {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .action-btn {
        padding: 10px 20px;
        border: none;
        border-radius: 20px;
        font-weight: 600;
        text-decoration: none;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        font-size: 14px;
        white-space: nowrap;
    }

    .action-btn.lab {
        background: linear-gradient(45deg, #ff6b6b, #ee5a24);
        color: white;
    }

    .action-btn.study {
        background: linear-gradient(45deg, #4834d4, #686de0);
        color: white;
    }

    .action-btn.notes {
        background: linear-gradient(45deg, #26de81, #20bf6b);
        color: white;
    }

    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.2);
    }

    /* Content Tabs */
    .content-tabs {
        background: linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(248,250,252,0.98) 100%);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 
            0 10px 30px rgba(0,0,0,0.08),
            0 4px 12px rgba(102,126,234,0.1),
            inset 0 1px 0 rgba(255,255,255,0.8);
        margin-bottom: 40px;
        position: relative;
    }

    .content-tabs::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, rgba(102,126,234,0.02) 0%, rgba(118,75,162,0.02) 100%);
        pointer-events: none;
    }

    .tab-switcher {
        display: flex;
        background: linear-gradient(90deg, rgba(248,249,250,0.8) 0%, rgba(233,236,239,0.6) 100%);
        border-bottom: 1px solid rgba(233,236,239,0.5);
        position: relative;
        z-index: 1;
    }

    .tab-btn {
        flex: 1;
        padding: 20px;
        background: none;
        border: none;
        font-size: 1.1em;
        font-weight: 600;
        color: #6c757d;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
    }

    .tab-btn.active {
        color: #667eea;
        background: linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(248,250,252,0.9) 100%);
        backdrop-filter: blur(8px);
        border: 1px solid rgba(255,255,255,0.3);
        border-bottom: none;
        box-shadow: 
            0 -2px 8px rgba(102,126,234,0.1),
            inset 0 1px 0 rgba(255,255,255,0.9);
    }

    .tab-btn.active::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, #667eea, #764ba2);
        box-shadow: 0 2px 8px rgba(102,126,234,0.3);
    }

    .tab-btn:hover:not(.active) {
        background: linear-gradient(135deg, rgba(233,236,239,0.8) 0%, rgba(203,213,224,0.6) 100%);
        color: #495057;
        backdrop-filter: blur(6px);
    }

    .tab-content {
        padding: 30px;
        background: rgba(255,255,255,0.4);
        position: relative;
        z-index: 1;
    }

    .tab-panel {
        display: none;
    }

    .tab-panel.active {
        display: block;
        animation: fadeInSlide 0.4s ease-out;
    }

    @keyframes fadeInSlide {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    /* Responsive */
    @media (max-width: 768px) {
        .quick-access-bar {
            flex-direction: column;
            align-items: stretch;
        }
        
        .search-container {
            min-width: auto;
        }
        
        .quick-actions {
            justify-content: center;
        }
        
        .tab-switcher {
            flex-direction: column;
        }
        
        .tab-btn {
            padding: 15px;
        }
        
        .tab-content {
            padding: 20px;
        }
    }
    
    @media (max-width: 480px) {
        .container {
            padding: 15px;
        }
        
        .quick-access-bar {
            padding: 15px;
        }
        
        .action-btn {
            flex: 1;
            justify-content: center;
        }
        
        .tab-content {
            padding: 15px;
        }
    }
</style>

</body>
</html>