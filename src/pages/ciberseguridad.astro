---
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';

---	

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ciberseguridad - √çndice de Temas | Knowledge Base</title>
    <meta name="description" content="√çndice din√°mico de todos los temas de ciberseguridad cargado autom√°ticamente">
    <link rel="icon" type="image/svg+xml" href="/favicon.svg">
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">
</head>

<body>


    <!-- Main Content -->
    <main class="cyber-main">
            <!-- Navigation Header -->
<Navbar />
        <!-- Hero Section -->
        <section class="hero-section">
            <div class="hero-background">
                <div class="hero-grid"></div>
                <div class="hero-glow"></div>
            </div>
            <div class="hero-content">
               
                <h1 class="hero-title">
                    <span class="title-icon">üîê</span>
                    <span class="title-text">Ciberseguridad</span>
                </h1>
               
               
            </div>
        </section>

        <!-- Transition Divider -->
        <div class="transition-divider">
            <div class="pattern-overlay">
                <div class="dot-pattern"></div>
                <div class="wave-pattern"></div>
            </div>
        </div>

        <!-- Content Grid -->
        <section class="content-section">
            <div class="content-container">
                <!-- Dynamic Index -->
                <div class="index-grid" id="dynamic-index">
                    <!-- Loading State -->
                    <div class="loading-wrapper">
                        <div class="loading-animation">
                            <div class="loading-dots">
                                <div class="dot dot-1"></div>
                                <div class="dot dot-2"></div>
                                <div class="dot dot-3"></div>
                            </div>
                            <p class="loading-text">Cargando contenido...</p>
                        </div>
                    </div>
                </div>


            </div>
        </section>
    </main>

    <!-- Footer -->
   
    <Footer />
</body>
</html>

<style>
    /* Reset y Base */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
        line-height: 1.6;
        color: #fff;
        background: #0a0a0a;
        overflow-x: hidden;
    }



    /* Main Layout */
    .cyber-main {
        min-height: 100vh;
    }

    /* Hero Section */
    .hero-section {
        position: relative;
        padding: 2rem 2rem;
        overflow: hidden;
    }

    .hero-background {
        position: absolute;
        inset: 0;
        background: linear-gradient(
            135deg,
            #0a0a0a 0%,
            #1a0f2e 30%,
            #2d1b69 50%,
            #1a0f2e 70%,
            #0a0a0a 100%
        );
    }

    .hero-grid {
        position: absolute;
        inset: 0;
        background-image: 
            linear-gradient(rgba(59, 130, 246, 0.1) 1px, transparent 1px),
            linear-gradient(90deg, rgba(59, 130, 246, 0.1) 1px, transparent 1px);
        background-size: 50px 50px;
        animation: grid-move 20s linear infinite;
    }

    @keyframes grid-move {
        0% { transform: translate(0, 0); }
        100% { transform: translate(50px, 50px); }
    }

    .hero-glow {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 80%;
        height: 80%;
        background: radial-gradient(
            ellipse at center,
            rgba(139, 92, 246, 0.15) 0%,
            rgba(59, 130, 246, 0.1) 30%,
            transparent 70%
        );
        animation: glow-pulse 4s ease-in-out infinite alternate;
    }

    @keyframes glow-pulse {
        0% { opacity: 0.5; transform: translate(-50%, -50%) scale(1); }
        100% { opacity: 0.8; transform: translate(-50%, -50%) scale(1.1); }
    }

    .hero-content {
        position: relative;
        z-index: 10;
        max-width: 1200px;
        margin: 0 auto;
        text-align: center;
    }



    .hero-title {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        font-size: clamp(2.5rem, 5vw, 4rem);
        font-weight: 900;
        margin-bottom: 1.5rem;
        letter-spacing: -0.02em;
    }

    .title-icon {
        font-size: clamp(2.5rem, 5vw, 4rem);
        filter: drop-shadow(0 0 20px rgba(168, 85, 247, 0.6));
        animation: icon-float 3s ease-in-out infinite;
    }

    @keyframes icon-float {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-5px) rotate(2deg); }
    }

    .title-text {
        background: linear-gradient(
            135deg,
            #a855f7 0%,
            #3b82f6 25%,
            #ec4899 50%,
            #f59e0b 75%,
            #a855f7 100%
        );
        background-size: 300% 300%;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        animation: gradient-shift 3s ease-in-out infinite;
    }

    @keyframes gradient-shift {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }

    /* Transition Divider */
    .transition-divider {
        position: relative;
        height: 80px;
        background: linear-gradient(
            180deg,
            rgba(26, 15, 46, 0.8) 0%,
            rgba(20, 12, 35, 0.9) 30%,
            rgba(15, 10, 25, 0.95) 70%,
            rgba(10, 10, 10, 1) 100%
        );
        overflow: hidden;
        margin-top: -2rem;
        z-index: 4;
    }

    .pattern-overlay {
        position: absolute;
        inset: 0;
        opacity: 0.6;
    }

    .dot-pattern {
        position: absolute;
        inset: 0;
        background-image: radial-gradient(circle at 20% 80%, rgba(139, 92, 246, 0.15) 2px, transparent 2px),
                          radial-gradient(circle at 80% 20%, rgba(59, 130, 246, 0.1) 1px, transparent 1px),
                          radial-gradient(circle at 40% 40%, rgba(236, 72, 153, 0.08) 1.5px, transparent 1.5px);
        background-size: 60px 60px, 40px 40px, 80px 80px;
        animation: dots-drift 25s linear infinite;
    }

    .wave-pattern {
        position: absolute;
        inset: 0;
        background: linear-gradient(
            90deg,
            transparent 0%,
            rgba(139, 92, 246, 0.05) 25%,
            rgba(59, 130, 246, 0.03) 50%,
            rgba(139, 92, 246, 0.05) 75%,
            transparent 100%
        );
        animation: wave-flow 8s ease-in-out infinite;
    }

    @keyframes dots-drift {
        0% { transform: translateX(0) translateY(0); }
        100% { transform: translateX(-60px) translateY(-20px); }
    }

    @keyframes wave-flow {
        0%, 100% { transform: translateX(-20px); opacity: 0.6; }
        50% { transform: translateX(20px); opacity: 0.8; }
    }

    /* Content Section */
    .content-section {
        padding: 1rem 2rem 4rem;
        background: linear-gradient(
            180deg,
            rgba(10, 10, 10, 0.8) 0%,
            rgba(10, 10, 10, 0.9) 20%,
            #0a0a0a 100%
        );
        margin-top: 0;
        position: relative;
        z-index: 5;
    }

    .content-container {
        max-width: 1400px;
        margin: 0 auto;
    }

    /* Loading Animation */
    .loading-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 4rem 2rem;
    }

    .loading-animation {
        text-align: center;
    }

    .loading-dots {
        display: flex;
        gap: 0.5rem;
        margin-bottom: 1rem;
        justify-content: center;
    }

    .dot {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: linear-gradient(135deg, #3b82f6, #8b5cf6);
        animation: dot-bounce 1.4s infinite ease-in-out;
    }

    .dot-1 { animation-delay: -0.32s; }
    .dot-2 { animation-delay: -0.16s; }
    .dot-3 { animation-delay: 0s; }

    @keyframes dot-bounce {
        0%, 80%, 100% { transform: scale(0); opacity: 0.5; }
        40% { transform: scale(1); opacity: 1; }
    }

    .loading-text {
        color: rgba(255, 255, 255, 0.6);
        font-size: 1rem;
    }

    /* Index Grid */
    .index-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));
        gap: 2rem;
        margin-bottom: 3rem;
    }

    /* Category Sections */
    .category-section {
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.15);
        border-radius: 1.5rem;
        padding: 2rem;
        backdrop-filter: blur(20px);
        transition: all 0.4s ease;
        position: relative;
        overflow: hidden;
        opacity: 0;
        transform: translateY(30px);
        animation: section-reveal 0.8s ease forwards;
        box-shadow: 
            0 8px 32px rgba(0, 0, 0, 0.3),
            inset 0 1px 0 rgba(255, 255, 255, 0.1);
    }

    @keyframes section-reveal {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .category-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #3b82f6, #8b5cf6, #ec4899);
        background-size: 200% 100%;
        animation: border-flow 3s ease-in-out infinite;
    }

    @keyframes border-flow {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }

    .category-section:hover {
        background: rgba(255, 255, 255, 0.08);
        border-color: rgba(255, 255, 255, 0.25);
        transform: translateY(-5px);
        box-shadow: 
            0 20px 40px rgba(0, 0, 0, 0.4),
            0 8px 32px rgba(139, 92, 246, 0.15),
            inset 0 1px 0 rgba(255, 255, 255, 0.15);
    }

    .category-section h2 {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-size: 1.8rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        color: #fff;
        padding-bottom: 1rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    .category-section h2 .icon {
        font-size: 1.75rem;
        padding: 0.75rem;
        background: linear-gradient(135deg, rgba(139, 92, 246, 0.2), rgba(59, 130, 246, 0.1));
        border: 1px solid rgba(139, 92, 246, 0.4);
        border-radius: 1rem;
        backdrop-filter: blur(10px);
        box-shadow: 
            0 4px 12px rgba(139, 92, 246, 0.2),
            inset 0 1px 0 rgba(255, 255, 255, 0.1);
        filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));
    }

    /* Topic Lists */
    .topic-list {
        list-style: none;
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .topic-link {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem 1.25rem;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 1rem;
        text-decoration: none;
        color: rgba(200, 200, 200, 0.85);
        font-weight: 500;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
        position: relative;
        overflow: hidden;
    }

    .topic-link::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
        transition: left 0.5s ease;
    }

    .topic-link:hover::before {
        left: 100%;
    }

    .topic-link:hover {
        background: rgba(59, 130, 246, 0.2);
        border-color: rgba(59, 130, 246, 0.4);
        color: #fff;
        transform: translateX(5px);
        box-shadow: 0 5px 15px rgba(59, 130, 246, 0.3);
    }

    /* Status Variations */
    .topic-link.completed {
        background: rgba(34, 197, 94, 0.1);
        border-color: rgba(34, 197, 94, 0.3);
        color: #22c55e;
    }

    .topic-link.completed:hover {
        background: rgba(34, 197, 94, 0.2);
        border-color: rgba(34, 197, 94, 0.5);
        box-shadow: 0 5px 15px rgba(34, 197, 94, 0.3);
    }

    .topic-link.interactive {
        background: rgba(245, 158, 11, 0.1);
        border-color: rgba(245, 158, 11, 0.3);
        color: #f59e0b;
    }

    .topic-link.interactive:hover {
        background: rgba(245, 158, 11, 0.2);
        border-color: rgba(245, 158, 11, 0.5);
        box-shadow: 0 5px 15px rgba(245, 158, 11, 0.3);
    }

    .topic-link.planned {
        background: rgba(148, 163, 184, 0.05);
        border-color: rgba(148, 163, 184, 0.2);
        color: rgba(148, 163, 184, 0.8);
        cursor: default;
    }

    .topic-link.planned:hover {
        transform: none;
        box-shadow: none;
    }







    /* Responsive Design */
    @media (max-width: 1024px) {
        .index-grid {
            grid-template-columns: repeat(auto-fit, minmax(340px, 1fr));
            gap: 1.5rem;
        }
    }

    @media (max-width: 768px) {
        .hero-section {
            padding: 1.5rem 1rem;
        }

        .content-section {
            padding: 0.5rem 1rem 2rem;
            margin-top: -1rem;
        }

        .index-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .category-section {
            padding: 1.5rem;
        }
    }

    @media (max-width: 480px) {
        .hero-section {
            padding: 1rem 0.75rem;
        }

        .content-section {
            padding: 0.5rem 0.75rem 1.5rem;
            margin-top: -0.5rem;
        }

        .category-section {
            padding: 1.25rem;
        }

        .category-section h2 {
            font-size: 1.25rem;
            gap: 0.75rem;
        }

        .category-section h2 .icon {
            font-size: 1.5rem;
            padding: 0.5rem;
        }

        .topic-link {
            padding: 0.875rem 1rem;
            font-size: 0.9rem;
        }
    }
</style>

<script>
// Sistema de carga din√°mica desde JSON
class CyberSecurityIndex {
    constructor() {
        this.searchIndex = null;
        this.sections = null;
        this.init();
    }

            async init() {
            console.log('üöÄ Iniciando CyberSecurityIndex...');
            try {
                await this.loadSearchIndex();
                console.log('‚úÖ JSON cargado exitosamente');
                this.buildIndex();
                console.log('‚úÖ √çndice construido');
                console.log('‚úÖ Inicializaci√≥n completa');
            } catch (error) {
                console.error('‚ùå Error inicializando √≠ndice:', error);
                this.showError();
            }
        }

    async loadSearchIndex() {
        try {
            const response = await fetch('/search-index.json');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            this.searchIndex = data.pages;
            this.sections = data.sections || this.generateSectionsFromPages();
            console.log('√çndice de b√∫squeda cargado:', this.searchIndex.length, 'p√°ginas');
        } catch (error) {
            console.error('Error cargando √≠ndice de b√∫squeda:', error);
            throw error;
        }
    }

    generateSectionsFromPages() {
        // Generar secciones autom√°ticamente si no existen en el JSON
        const sectionsMap = {};
        this.searchIndex.forEach(page => {
            if (page.category === 'Ciberseguridad' && page.section) {
                if (!sectionsMap[page.section]) {
                    sectionsMap[page.section] = {
                        name: this.sectionNameFromKey(page.section),
                        icon: this.getSectionIcon(page.section),
                        description: `Temas relacionados con ${this.sectionNameFromKey(page.section).toLowerCase()}`,
                        column: this.getColumnForSection(page.section),
                        order: 1
                    };
                }
            }
        });
        return sectionsMap;
    }

    sectionNameFromKey(key) {
        const mapping = {
            'fundamentos-de-seguridad': 'Fundamentos de Seguridad',
            'criptografia': 'Criptograf√≠a',
            'normativas': 'Normativas y Compliance',
            'seguridad-en-redes': 'Seguridad en Redes',
            'identidad-y-acceso': 'Identidad y Gesti√≥n de Acceso',
            'respuesta-a-incidentes': 'Respuesta a Incidentes',
            'informatica-forense': 'Inform√°tica Forense',
            'laboratorios': 'Laboratorios y Pr√°ctica',
            'especialidades-avanzadas': 'Especialidades Avanzadas'
        };
        return mapping[key] || key.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    }

    getSectionIcon(section) {
        const iconMapping = {
            'fundamentos-de-seguridad': 'üõ°Ô∏è',
            'criptografia': 'üîê',
            'normativas': 'üìã',
            'seguridad-en-redes': 'üåê',
            'identidad-y-acceso': 'üîë',
            'respuesta-a-incidentes': 'üö®',
            'informatica-forense': 'üî¨',
            'laboratorios': '‚öóÔ∏è',
            'especialidades-avanzadas': 'üéØ'
        };
        return iconMapping[section] || 'üìö';
    }

    getColumnForSection(section) {
        const columnMapping = {
            'fundamentos-de-seguridad': 1,
            'criptografia': 1,
            'normativas': 1,
            'seguridad-en-redes': 2,
            'identidad-y-acceso': 2,
            'respuesta-a-incidentes': 2,
            'informatica-forense': 3,
            'laboratorios': 3,
            'especialidades-avanzadas': 3
        };
        return columnMapping[section] || 1;
    }

    buildIndex() {
        const indexContainer = document.getElementById('dynamic-index');
        console.log('üîç IndexContainer encontrado:', !!indexContainer);
        
        if (!indexContainer) {
            console.error('‚ùå No se encontr√≥ el elemento dynamic-index');
            return;
        }
        
        // Filtrar solo p√°ginas de ciberseguridad
        const cyberPages = this.searchIndex.filter(page => page.category === 'Ciberseguridad');
        console.log('üìä P√°ginas de ciberseguridad encontradas:', cyberPages.length);
        
        // Agrupar por columnas
        const columns = { 1: [], 2: [], 3: [] };
        
        // Organizar secciones por columnas
        Object.entries(this.sections).forEach(([sectionKey, section]) => {
            const columnNum = section.column || 1;
            if (!columns[columnNum]) columns[columnNum] = [];
            
            const sectionPages = cyberPages
                .filter(page => page.section === sectionKey)
                .sort((a, b) => (a.order || 999) - (b.order || 999));
            
            columns[columnNum].push({
                sectionKey,
                section,
                pages: sectionPages
            });
        });

        // Construir HTML de forma directa sin columnas
        let html = '';
        
        // Obtener todas las secciones y ordenarlas
        const allSections = [];
        for (let col = 1; col <= 3; col++) {
            if (columns[col] && columns[col].length > 0) {
                allSections.push(...columns[col]);
            }
        }
        
        // Ordenar por prioridad y construir HTML
        allSections
            .sort((a, b) => (a.section.order || 999) - (b.section.order || 999))
            .forEach(({ sectionKey, section, pages }) => {
                html += this.buildSectionHTML(section, pages, sectionKey);
            });

        indexContainer.innerHTML = html;
        
        // A√±adir event listeners
        this.addEventListeners();
    }

    buildSectionHTML(section, pages, sectionKey) {
        let html = `
            <div class="category-section" data-section="${sectionKey}">
                <h2><span class="icon">${section.icon}</span> ${section.name}</h2>
                <ul class="topic-list">
        `;

        pages.forEach(page => {
            const statusClass = page.status || 'planned';
            const statusIcon = this.getStatusIcon(page.status);
            const isLink = page.url && (page.status === 'completed' || page.status === 'interactive');
            
            if (isLink) {
                html += `
                    <li>
                        <a href="${page.url}" class="topic-link ${statusClass}">
                            ${page.icon} ${page.title}
                        </a>
                    </li>
                `;
            } else {
                html += `
                    <li>
                        <span class="topic-link ${statusClass}">
                            ${page.icon} ${page.title}
                        </span>
                    </li>
                `;
            }
        });

        html += `
                </ul>
            </div>
        `;

        return html;
    }

    getStatusIcon(status) {
        const statusIcons = {
            completed: '‚úÖ',
            interactive: 'üéØ',
            in_progress: 'üîÑ',
            planned: 'üìã'
        };
        return statusIcons[status] || 'üìã';
    }



    addEventListeners() {
        // Event listeners para tracking
        const topicLinks = document.querySelectorAll('.topic-link');
        topicLinks.forEach(link => {
            link.addEventListener('click', function() {
                if (this instanceof HTMLElement && this.textContent) {
                    const title = this.textContent.trim();
                    console.log(`Topic clicked: ${title}`);
                }
            });
        });
    }

    showError() {
        const indexContainer = document.getElementById('dynamic-index');
        if (indexContainer) {
            indexContainer.innerHTML = `
                <div class="loading-wrapper">
                    <div class="loading-animation">
                        <div style="color: #ff6b6b; font-size: 2rem; margin-bottom: 20px;">‚ö†Ô∏è</div>
                        <p style="color: #ff6b6b;">Error cargando el contenido</p>
                        <p style="color: rgba(255,255,255,0.6); font-size: 0.9rem;">Revisa la consola para m√°s detalles</p>
                    </div>
                </div>
            `;
        }
    }
}

// Inicializar cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', function() {
    new CyberSecurityIndex();
});
</script>
