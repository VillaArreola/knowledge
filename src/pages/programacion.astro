---
// Página de Programación integrada al diseño general
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";
import "../styles/global.css";

const title = "Programación - Índice de Temas";
const description = "Índice dinámico de todos los temas de programación cargado automáticamente";
---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} | Knowledge Base</title>
    <meta name="description" content={description}>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg">
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">
</head>

<body>
    <Navbar />

    <!-- Main Content -->
    <main class="programming-main">
      <div class="programming-page">
        <!-- Hero Section -->
        <section class="hero-section">
            <div class="hero-background">
                <div class="hero-grid"></div>
                <div class="hero-glow"></div>
            </div>
            <div class="hero-content">
                <div class="hero-badge">
                    <span class="badge-icon">💻</span>
                    <span class="badge-text">Knowledge Base</span>
                </div>
                
                <h1 class="hero-title">
                    <span class="title-text">Programación</span>
                </h1>
                
                <p class="hero-description">
                    Explora lenguajes, frameworks, patrones y mejores prácticas de desarrollo.
                    Desde fundamentos hasta arquitecturas avanzadas y tecnologías emergentes.
                </p>
                
                <div class="hero-stats">
                    <div class="stat-item">
                        <span class="stat-number" id="topics-count">-</span>
                        <span class="stat-label">Temas</span>
                    </div>
                    <div class="stat-divider"></div>
                    <div class="stat-item">
                        <span class="stat-number" id="sections-count">-</span>
                        <span class="stat-label">Secciones</span>
                    </div>
                </div>
            </div>
        </section>

        <!-- Content Grid -->
        <section class="content-section">
            <div class="content-container">
                <div class="section-header">
                    <h2 class="section-title">Contenido Organizado</h2>
                    <p class="section-subtitle">
                        Navega por los diferentes temas organizados por categorías especializadas
                    </p>
                </div>
                
                <!-- Dynamic Index -->
                <div class="index-grid" id="dynamic-index">
                    <!-- Loading State -->
                    <div class="loading-wrapper">
                        <div class="loading-animation">
                            <div class="loading-dots">
                                <div class="dot dot-1"></div>
                                <div class="dot dot-2"></div>
                                <div class="dot dot-3"></div>
                            </div>
                            <p class="loading-text">Cargando contenido...</p>
                        </div>
                    </div>
                </div>
            </div>
        </section>
      </div>
    </main>

    <!-- Footer global -->
    <Footer />

</body>
</html>

<style is:global>
    /* CSS Variables for consistent theming (scoped) */
    .programming-page {
        --programming-primary: #f59e0b;
        --programming-secondary: #d97706;
        --programming-accent: #fbbf24;
        --programming-success: #10b981;
        --programming-bg-dark: #0a0a0a;
        --programming-text-primary: #ffffff;
        --programming-text-secondary: rgba(255, 255, 255, 0.8);
        --programming-text-muted: rgba(255, 255, 255, 0.6);
    }

    /* Global styles for programming page */
    .programming-page {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
        line-height: 1.6;
        color: var(--programming-text-primary);
        background: var(--programming-bg-dark);
        overflow-x: hidden;
    }

    /* Eliminar todos los puntos de lista */
    .programming-page * {
        list-style: none !important;
        list-style-type: none !important;
    }

    .programming-page ul, 
    .programming-page ol, 
    .programming-page li {
        list-style: none !important;
        list-style-type: none !important;
        margin: 0 !important;
        padding: 0 !important;
    }

    .programming-page li::marker {
        display: none !important;
        content: none !important;
    }

    .programming-page li::before {
        display: none !important;
        content: none !important;
    }

    /* Estilos específicos para elementos de lista */
    .programming-page .topic-list,
    .programming-page .topic-list * {
        list-style: none !important;
        list-style-type: none !important;
        list-style-image: none !important;
        list-style-position: outside !important;
    }

    .programming-main {
        display: block;
        position: relative;
        width: 100%;
        min-height: 100vh;
    }

    /* Hero Section */
    .programming-page .hero-section {
        position: relative;
        padding: 2rem 1.5rem 2.5rem;
        overflow: hidden;
        min-height: 45vh;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .programming-page .hero-background {
        position: absolute;
        inset: 0;
        background: linear-gradient(
            135deg,
            var(--programming-bg-dark) 0%,
            #2e1a0f 30%,
            #69451b 50%,
            #2e1a0f 70%,
            var(--programming-bg-dark) 100%
        );
    }

    .programming-page .hero-grid {
        position: absolute;
        inset: 0;
        background-image: 
            linear-gradient(rgba(245, 158, 11, 0.05) 1px, transparent 1px),
            linear-gradient(90deg, rgba(245, 158, 11, 0.05) 1px, transparent 1px);
        background-size: 40px 40px;
        animation: grid-move 20s linear infinite;
    }

    @keyframes grid-move {
        0% { transform: translate(0, 0); }
        100% { transform: translate(50px, 50px); }
    }

    .programming-page .hero-glow {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 70%;
        height: 70%;
        background: radial-gradient(
            ellipse at center,
            rgba(245, 158, 11, 0.08) 0%,
            rgba(217, 119, 6, 0.06) 30%,
            transparent 70%
        );
        animation: glow-pulse 4s ease-in-out infinite alternate;
    }

    @keyframes glow-pulse {
        0% { opacity: 0.5; transform: translate(-50%, -50%) scale(1); }
        100% { opacity: 0.8; transform: translate(-50%, -50%) scale(1.1); }
    }

    .programming-page .hero-content {
        position: relative;
        z-index: 10;
        max-width: 900px;
        margin: 0 auto;
        text-align: center;
    }

    /* Hero Badge */
    .programming-page .hero-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.5rem 1rem;
        background: rgba(245, 158, 11, 0.15);
        border: 1px solid rgba(245, 158, 11, 0.3);
        border-radius: 1.25rem;
        backdrop-filter: blur(10px);
        margin-bottom: 1rem;
        font-size: 0.85rem;
        font-weight: 500;
        color: var(--programming-text-secondary);
        box-shadow: 0 2px 10px rgba(245, 158, 11, 0.15);
    }

    .badge-icon {
        font-size: 1.25rem;
        filter: drop-shadow(0 0 8px rgba(245, 158, 11, 0.6));
    }

    .badge-text {
        letter-spacing: 0.025em;
    }

    /* Hero Title */
    .programming-page .hero-title {
        font-size: clamp(2rem, 4.5vw, 3rem);
        font-weight: 800;
        margin-bottom: 1rem;
        letter-spacing: -0.02em;
        line-height: 1.1;
        color: var(--programming-text-primary);
    }

    .programming-page .title-text {
        background: linear-gradient(
            135deg,
            #ffffff 0%,
            #fef3c7 25%,
            #fde68a 50%,
            #fcd34d 75%,
            #f59e0b 100%
        );
        background-size: 300% 300%;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        animation: text-shimmer 6s ease-in-out infinite;
        text-shadow: 0 0 20px rgba(245, 158, 11, 0.08);
    }

    @keyframes text-shimmer {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }

    /* Hero Description */
    .programming-page .hero-description {
        font-size: clamp(1rem, 1.6vw, 1.125rem);
        line-height: 1.6;
        color: var(--programming-text-secondary);
        margin-bottom: 1.25rem;
        max-width: 700px;
        margin-left: auto;
        margin-right: auto;
        font-weight: 400;
    }

    /* Hero Stats */
    .programming-page .hero-stats {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin-top: 1rem;
    }

    .programming-page .stat-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
    }

    .programming-page .stat-number {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--programming-primary);
        text-shadow: 0 0 12px rgba(245, 158, 11, 0.25);
    }

    .programming-page .stat-label {
        font-size: 0.75rem;
        color: var(--programming-text-muted);
        text-transform: uppercase;
        letter-spacing: 0.1em;
        font-weight: 500;
    }

    .programming-page .stat-divider {
        width: 2px;
        height: 24px;
        background: linear-gradient(
            180deg,
            transparent 0%,
            rgba(255, 255, 255, 0.3) 50%,
            transparent 100%
        );
    }

    /* Content Section */
    .programming-page .content-section {
        padding: 4rem 2rem 6rem;
        background: var(--programming-bg-dark);
        position: relative;
    }

    .programming-page .content-container {
        max-width: 1400px;
        margin: 0 auto;
        width: 100%;
        padding-left: 2rem;
        padding-right: 2rem;
    }

    /* Section Header */
    .programming-page .section-header {
        text-align: center;
        margin-bottom: 4rem;
    }

    .programming-page .section-title {
        font-size: clamp(2rem, 4vw, 2.75rem);
        font-weight: 700;
        color: var(--programming-text-primary);
        margin-bottom: 1rem;
        letter-spacing: -0.025em;
    }

    .programming-page .section-subtitle {
        font-size: clamp(1rem, 2vw, 1.25rem);
        color: var(--programming-text-secondary);
        max-width: 600px;
        margin: 0 auto;
        line-height: 1.6;
    }

    /* Loading Animation */
    .programming-page .loading-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 4rem 2rem;
    }

    .programming-page .loading-animation {
        text-align: center;
    }

    .programming-page .loading-dots {
        display: flex;
        gap: 0.5rem;
        margin-bottom: 1rem;
        justify-content: center;
    }

    .programming-page .dot {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--programming-primary), var(--programming-secondary));
        animation: dot-bounce 1.4s infinite ease-in-out;
    }

    .dot-1 { animation-delay: -0.32s; }
    .dot-2 { animation-delay: -0.16s; }
    .dot-3 { animation-delay: 0s; }

    @keyframes dot-bounce {
        0%, 80%, 100% { transform: scale(0); opacity: 0.5; }
        40% { transform: scale(1); opacity: 1; }
    }

    .programming-page .loading-text {
        color: var(--programming-text-muted);
        font-size: 1rem;
    }

    /* Index Grid */
    .programming-page .index-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
        gap: 1.25rem;
        margin-bottom: 2rem;
    }

    /* Category Sections */
    .programming-page .category-section {
        background: rgba(255, 255, 255, 0.03);
        border: 1px solid rgba(255, 255, 255, 0.08);
        border-radius: 0.75rem;
        padding: 1.25rem 1.25rem 1rem;
        backdrop-filter: blur(14px);
        transition: all 0.2s ease;
        position: relative;
        overflow: hidden;
        opacity: 0;
        transform: translateY(14px);
        animation: section-reveal 0.45s ease forwards;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);
    }

    @keyframes section-reveal {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .programming-page .programming-category-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, var(--programming-primary), var(--programming-secondary));
        border-radius: 1.25rem 1.25rem 0 0;
        opacity: 0.8;
    }

    .programming-page .category-section:hover {
        background: rgba(255, 255, 255, 0.06);
        border-color: rgba(255, 255, 255, 0.14);
        transform: translateY(-1px);
        box-shadow: 0 6px 18px rgba(0, 0, 0, 0.22);
    }

    .programming-page .category-section h2 {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        font-size: 1.125rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: var(--programming-text-primary);
        padding-bottom: 0.75rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.08);
        letter-spacing: -0.01em;
    }

    .programming-page .category-section h2 .icon {
        font-size: 1.125rem;
        padding: 0.5rem;
        background: rgba(245, 158, 11, 0.12);
        border: 1px solid rgba(245, 158, 11, 0.25);
        border-radius: 0.5rem;
        backdrop-filter: blur(8px);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Topic Lists */
    .programming-page .topic-list {
        list-style: none !important;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin: 0;
        padding: 0;
    }

    .programming-page .topic-list li {
        list-style: none !important;
        list-style-type: none !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
        position: relative;
        width: 100%;
        opacity: 1;
        transform: translateY(0);
        transition: all 0.3s ease;
        border-radius: 0.75rem;
        overflow: hidden;
    }
    /* Vista densa para muchas entradas */
    .programming-page .topic-list.dense {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
        gap: 0.5rem 0.75rem;
    }
    @media (max-width: 640px) {
        .programming-page .topic-list.dense {
            grid-template-columns: 1fr;
        }
    }

    .programming-page .topic-list li::before,
    .programming-page .topic-list li::after,
    .programming-page .topic-list li::marker {
        display: none !important;
        content: none !important;
    }

    /* Efecto hover en el contenedor li */
    .programming-page .topic-list li:hover {
        transform: translateY(-2px);
        transition: transform 0.3s ease;
    }

    /* Estilos específicos para topic-item */
    .programming-page .topic-item {
        list-style: none !important;
        list-style-type: none !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
        position: relative;
        width: 100%;
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        border-radius: 0.75rem;
        overflow: hidden;
    }
    /* Ocultos por defecto cuando hay muchos */
    .programming-page .topic-item.hidden-item { display: none; }
    .programming-page .category-section.expanded .topic-item.hidden-item { display: block; }

    /* Botón Ver más */
    .programming-page .section-more {
        margin-top: 0.75rem;
        display: flex;
        justify-content: center;
    }
    .programming-page .show-more-btn {
        background: rgba(255,255,255,0.06);
        border: 1px solid rgba(255,255,255,0.12);
        color: rgba(255,255,255,0.9);
        font-weight: 600;
        font-size: 0.85rem;
        padding: 0.5rem 0.9rem;
        border-radius: 0.5rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    .programming-page .show-more-btn:hover {
        background: rgba(255,255,255,0.1);
        border-color: rgba(245,158,11,0.35);
        box-shadow: 0 6px 18px rgba(245,158,11,0.18);
    }

    .programming-page .topic-item::before,
    .programming-page .topic-item::after,
    .programming-page .topic-item::marker {
        display: none !important;
        content: none !important;
    }

    /* Efecto hover en el contenedor topic-item */
    .programming-page .topic-item:hover {
        transform: translateY(-1px);
    }

    /* Animación de entrada para li */
    .programming-page .topic-list li.fade-in {
        opacity: 0;
        transform: translateY(20px);
        animation: li-slide-in 0.6s ease forwards;
    }

    @keyframes li-slide-in {
        0% {
            opacity: 0;
            transform: translateY(20px);
        }
        100% {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .programming-page .topic-link {
        display: flex;
        align-items: center;
        justify-content: flex-start;
        padding: 0.75rem 1rem;
        background: rgba(255, 255, 255, 0.025);
        border: 1px solid rgba(255, 255, 255, 0.07);
        border-radius: 0.5rem;
        text-decoration: none !important;
        color: rgba(255, 255, 255, 0.85);
        font-weight: 500;
        font-size: 0.9rem;
        transition: all 0.25s ease;
        backdrop-filter: blur(8px);
        position: relative;
        overflow: hidden;
        line-height: 1.4;
        cursor: pointer;
        opacity: 1;
        transform: translateX(0) scale(1);
        list-style: none !important;
        margin: 0;
    }

    .programming-page .topic-link::marker {
        display: none !important;
    }

    /* Efecto de ondas al hover */
    .programming-page .topic-link::before {
        content: '';
        position: absolute;
        top: 50%;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(245, 158, 11, 0.1), transparent);
        transform: translateY(-50%);
        transition: left 0.6s ease;
    }

    .programming-page .topic-link:hover {
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.12), rgba(217, 119, 6, 0.08));
        border-color: rgba(245, 158, 11, 0.25);
        color: var(--programming-text-primary);
        transform: translateX(8px) scale(1.01);
        box-shadow: 0 8px 20px rgba(245, 158, 11, 0.22), 0 4px 12px rgba(217, 119, 6, 0.18);
    }

    .programming-page .topic-link:hover::before {
        left: 100%;
    }

    /* Animación de pulso al hacer clic */
    .programming-page .topic-link:active {
        transform: translateX(12px) scale(0.98);
        transition: transform 0.1s ease;
    }

    /* Efecto de brillo en el texto */
    .programming-page .topic-link:hover {
        text-shadow: none;
    }

    /* Indicador visual al lado derecho */
    .programming-page .topic-link::after {
        content: '→';
        position: absolute;
        right: 0.75rem;
        opacity: 0;
        color: var(--programming-primary);
        font-size: 0.9rem;
        transition: all 0.3s ease;
        transform: translateX(8px);
        z-index: 2;
    }

    .programming-page .topic-link:hover::after {
        opacity: 1;
        transform: translateX(0);
        animation: arrow-pulse 1s ease-in-out infinite;
    }

    /* Overlay estilos */
    .section-overlay-backdrop {
        position: fixed;
        inset: 0;
        background: rgba(0,0,0,0.6);
        backdrop-filter: blur(8px);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        visibility: hidden;
        transition: all 0.2s ease;
        z-index: 9999;
    }
    .section-overlay-backdrop.visible {
        opacity: 1;
        visibility: visible;
    }
    .section-overlay .overlay-card {
        width: min(1000px, 92vw);
        max-height: 85vh;
        background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
        border: 1px solid rgba(148,163,184,0.2);
        border-radius: 1rem;
        overflow: hidden;
        transform: translateY(10px);
        transition: transform 0.2s ease;
        box-shadow: 0 20px 60px rgba(0,0,0,0.45);
    }
    .section-overlay-backdrop.visible .overlay-card {
        transform: translateY(0);
    }
    .section-overlay .overlay-header {
        display: grid;
        grid-template-columns: 1fr auto auto;
        align-items: center;
        gap: 0.5rem;
        padding: 0.9rem 1rem;
        border-bottom: 1px solid rgba(148,163,184,0.2);
    }
    .section-overlay .overlay-title { 
        color: #f8fafc;
        font-weight: 800;
        letter-spacing: -0.01em;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        text-shadow: 0 1px 2px rgba(0,0,0,0.4);
    }
    .section-overlay .overlay-title .icon { font-size: 1.25rem; }
    .section-overlay .overlay-meta { color: #cbd5e1; font-size: 0.95rem; font-weight: 600; }
    .section-overlay .overlay-close {
        background: none; border: none; color: #cbd5e1; font-size: 1.5rem; padding: 0.25rem 0.5rem; cursor: pointer; border-radius: 0.375rem;
    }
    .section-overlay .overlay-close:hover { background: rgba(255,255,255,0.08); color: #fff; }
    .section-overlay .overlay-content { padding: 1rem; overflow: auto; max-height: calc(85vh - 56px); }
    .section-overlay .overlay-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
        gap: 0.75rem;
    }
    .section-overlay .overlay-grid .topic-link {
        padding: 0.9rem 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        border-radius: 0.5rem;
        background: rgba(255,255,255,0.06);
        border: 1px solid rgba(148,163,184,0.22);
        color: #e5e7eb;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.2s ease;
    }
    .section-overlay .overlay-grid .topic-link:link,
    .section-overlay .overlay-grid .topic-link:visited,
    .section-overlay .overlay-grid .topic-link:hover,
    .section-overlay .overlay-grid .topic-link:active,
    .section-overlay .overlay-grid .topic-link:focus {
        color: #e5e7eb;
        text-decoration: none;
    }
    .section-overlay .overlay-grid .topic-link:hover {
        background: rgba(255,255,255,0.1);
        border-color: rgba(148,163,184,0.35);
        box-shadow: 0 8px 24px rgba(0,0,0,0.25);
    }

    @keyframes arrow-pulse {
        0%, 100% { transform: translateX(0) scale(1); }
        50% { transform: translateX(3px) scale(1.1); }
    }

    /* Status Variations */
    .programming-page .topic-link.completed {
        background: rgba(16, 185, 129, 0.1);
        border-color: rgba(16, 185, 129, 0.3);
        color: var(--programming-success);
        position: relative;
    }

    .programming-page .topic-link.completed::before {
        background: linear-gradient(90deg, transparent, rgba(16, 185, 129, 0.15), transparent);
    }

    .programming-page .topic-link.completed::after {
        content: '✓';
        color: var(--programming-success);
    }

    .programming-page .topic-link.completed:hover {
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.2), rgba(6, 182, 212, 0.15));
        border-color: rgba(16, 185, 129, 0.5);
        color: var(--programming-text-primary);
        transform: translateX(15px) scale(1.03);
        box-shadow: 
            0 10px 30px rgba(16, 185, 129, 0.5),
            0 6px 16px rgba(6, 182, 212, 0.4),
            inset 0 1px 0 rgba(255, 255, 255, 0.15),
            0 0 25px rgba(16, 185, 129, 0.3);
        text-shadow: 
            0 0 10px rgba(16, 185, 129, 0.8),
            0 0 20px rgba(6, 182, 212, 0.5);
    }

    .programming-page .topic-link.interactive {
        background: rgba(251, 191, 36, 0.1);
        border-color: rgba(251, 191, 36, 0.3);
        color: var(--programming-accent);
        position: relative;
    }

    .programming-page .topic-link.interactive::before {
        background: linear-gradient(90deg, transparent, rgba(251, 191, 36, 0.15), transparent);
    }

    .programming-page .topic-link.interactive::after {
        content: '⚡';
        color: var(--programming-accent);
    }

    .programming-page .topic-link.interactive:hover {
        background: linear-gradient(135deg, rgba(251, 191, 36, 0.2), rgba(245, 158, 11, 0.15));
        border-color: rgba(251, 191, 36, 0.5);
        color: var(--programming-text-primary);
        transform: translateX(15px) scale(1.03);
        box-shadow: 
            0 10px 30px rgba(251, 191, 36, 0.5),
            0 6px 16px rgba(245, 158, 11, 0.4),
            inset 0 1px 0 rgba(255, 255, 255, 0.15),
            0 0 25px rgba(251, 191, 36, 0.3);
        text-shadow: 
            0 0 10px rgba(251, 191, 36, 0.8),
            0 0 20px rgba(245, 158, 11, 0.5);
    }

    .programming-page .topic-link.planned {
        background: rgba(148, 163, 184, 0.05);
        border-color: rgba(148, 163, 184, 0.2);
        color: rgba(148, 163, 184, 0.8);
        cursor: default;
        position: relative;
    }

    .programming-page .topic-link.planned::before {
        background: linear-gradient(90deg, transparent, rgba(148, 163, 184, 0.1), transparent);
    }

    .programming-page .topic-link.planned::after {
        content: '⏳';
        color: rgba(148, 163, 184, 0.8);
    }

    .programming-page .topic-link.planned:hover {
        background: rgba(148, 163, 184, 0.08);
        border-color: rgba(148, 163, 184, 0.25);
        transform: translateX(8px) scale(1.01);
        box-shadow: 
            0 6px 20px rgba(148, 163, 184, 0.3),
            inset 0 1px 0 rgba(255, 255, 255, 0.08),
            0 0 15px rgba(148, 163, 184, 0.2);
        text-shadow: 0 0 6px rgba(148, 163, 184, 0.5);
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
        .programming-page .index-grid {
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 1rem;
        }
        
        .programming-page .hero-stats {
            gap: 1rem;
        }
    }

    @media (max-width: 768px) {
        .programming-page .hero-section {
            padding: 1.5rem 1rem 2rem;
            min-height: 40vh;
        }

        .programming-page .hero-description {
            margin-bottom: 1rem;
        }

        .programming-page .hero-stats {
            flex-direction: column;
            gap: 0.75rem;
        }

        .programming-page .stat-divider {
            display: none;
        }

        .programming-page .content-section {
            padding: 1.5rem 1rem 2rem;
        }

        .programming-page .section-header {
            margin-bottom: 1.5rem;
        }

        .programming-page .index-grid {
            grid-template-columns: 1fr;
            gap: 0.75rem;
        }

        .programming-page .category-section {
            padding: 1rem;
        }
    }

    @media (max-width: 480px) {
        .programming-page .hero-section {
            padding: 1rem 0.75rem 1.5rem;
            min-height: 36vh;
        }

        .programming-page .hero-badge {
            padding: 0.5rem 0.75rem;
            font-size: 0.8rem;
            margin-bottom: 1rem;
        }

        .programming-page .hero-description {
            margin-bottom: 0.75rem;
        }

        .programming-page .content-section {
            padding: 1rem 0.75rem 1.5rem;
        }

        .programming-page .section-header {
            margin-bottom: 1.25rem;
        }

        .programming-page .category-section {
            padding: 0.75rem;
        }

        .programming-page .category-section h2 {
            font-size: 1rem;
            gap: 0.5rem;
            margin-bottom: 0.75rem;
        }

        .programming-page .category-section h2 .icon {
            font-size: 1rem;
            padding: 0.4rem;
        }

        .programming-page .topic-link {
            padding: 0.6rem 0.75rem;
            font-size: 0.85rem;
        }
    }

    /* CSS ULTRA-ESPECÍFICO PARA ELIMINAR PUNTOS */
    .programming-page .category-section ul,
    .programming-page .category-section ul li,
    .programming-page .topic-list,
    .programming-page .topic-list li,
    .programming-page .topic-item {
        list-style: none !important;
        list-style-type: none !important;
        list-style-image: none !important;
        list-style-position: outside !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    .programming-page .category-section ul li::before,
    .programming-page .category-section ul li::after,
    .programming-page .category-section ul li::marker,
    .programming-page .topic-list li::before,
    .programming-page .topic-list li::after,
    .programming-page .topic-list li::marker,
    .programming-page .topic-item::before,
    .programming-page .topic-item::after,
    .programming-page .topic-item::marker {
        display: none !important;
        content: none !important;
        visibility: hidden !important;
        font-size: 0 !important;
        width: 0 !important;
        height: 0 !important;
    }

    /* OVERRIDE FORZADO PARA WEBKIT */
    .programming-page .topic-list li::-webkit-details-marker,
    .programming-page .topic-item::-webkit-details-marker {
        display: none !important;
    }

    /* CORRECCIÓN DE COLOR Y SUBRAYADO */
    .programming-page .topic-link,
    .programming-page .topic-link:link,
    .programming-page .topic-link:visited,
    .programming-page .topic-link:hover,
    .programming-page .topic-link:active,
    .programming-page .topic-link:focus {
        color: rgba(255, 255, 255, 0.85) !important;
        text-decoration: none !important;
        text-decoration-line: none !important;
        text-decoration-style: none !important;
        text-decoration-color: transparent !important;
        border-bottom: none !important;
        border-top: none !important;
        border-left: none !important;
        border-right: 1px solid rgba(255, 255, 255, 0.08) !important;
        outline: none !important;
    }

    /* Estados específicos para los diferentes tipos */
    .programming-page .topic-link.completed,
    .programming-page .topic-link.completed:link,
    .programming-page .topic-link.completed:visited {
        color: var(--programming-success) !important;
        text-decoration: none !important;
    }

    .programming-page .topic-link.interactive,
    .programming-page .topic-link.interactive:link,
    .programming-page .topic-link.interactive:visited {
        color: var(--programming-accent) !important;
        text-decoration: none !important;
    }

    .programming-page .topic-link.planned,
    .programming-page .topic-link.planned:link,
    .programming-page .topic-link.planned:visited {
        color: rgba(148, 163, 184, 0.8) !important;
        text-decoration: none !important;
    }

    /* OVERRIDE HOVERS CON COLORES CORRECTOS */
    .programming-page .topic-link:hover,
    .programming-page .topic-link.completed:hover,
    .programming-page .topic-link.interactive:hover,
    .programming-page .topic-link.planned:hover {
        color: var(--programming-text-primary) !important;
        text-decoration: none !important;
    }

    /* ELIMINACION ABSOLUTA DE UNDERLINES */
    .programming-page a.topic-link {
        text-decoration: none !important;
    }

    .programming-page a.topic-link:before,
    .programming-page a.topic-link:after {
        border-bottom: none !important;
        text-decoration: none !important;
    }

    /* Forzar estilo de span para elementos no clickeables */
    .programming-page span.topic-link {
        color: rgba(148, 163, 184, 0.8) !important;
        text-decoration: none !important;
        cursor: default !important;
    }
</style>

<script>
// @ts-nocheck
// Sistema de carga dinámica desde JSON para Programación
class ProgrammingIndex {
    constructor() {
        this.searchIndex = null;
        this.sections = null;
        this.init();
    }

    async init() {
        console.log('🚀 Iniciando ProgrammingIndex...');
        try {
            await this.loadSearchIndex();
            console.log('✅ JSON cargado exitosamente');
            this.buildIndex();
            console.log('✅ Índice construido');
            console.log('✅ Inicialización completa');
        } catch (error) {
            console.error('❌ Error inicializando índice:', error);
            this.showError();
        }
    }

    async loadSearchIndex() {
        try {
            const response = await fetch('/search-index.json');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            this.searchIndex = data.pages;
            this.sections = data.sections || this.generateSectionsFromPages();
            console.log('Índice de búsqueda cargado:', this.searchIndex.length, 'páginas');
        } catch (error) {
            console.error('Error cargando índice de búsqueda:', error);
            throw error;
        }
    }

    generateSectionsFromPages() {
        const sectionsMap = {};
        this.searchIndex?.forEach((page) => {
            if (page.category === 'Programación' && page.section) {
                if (!sectionsMap[page.section]) {
                    sectionsMap[page.section] = {
                        name: this.sectionNameFromKey(page.section),
                        icon: this.getSectionIcon(page.section),
                        description: `Temas relacionados con ${this.sectionNameFromKey(page.section).toLowerCase()}`,
                        column: this.getColumnForSection(page.section),
                        order: 1
                    };
                }
            }
        });
        return sectionsMap;
    }

    sectionNameFromKey(key) {
        const mapping = {
            'lenguajes': 'Lenguajes de Programación',
            'frameworks': 'Frameworks y Librerías',
            'bases-datos': 'Bases de Datos',
            'desarrollo-web': 'Desarrollo Web',
            'desarrollo-movil': 'Desarrollo Móvil',
            'devops': 'DevOps y CI/CD',
            'arquitectura': 'Arquitectura de Software',
            'algoritmos': 'Algoritmos y Estructuras',
            'testing': 'Testing y Calidad'
        };
        return mapping[key] || key.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    }

    getSectionIcon(section) {
        const iconMapping = {
            'lenguajes': '📝',
            'frameworks': '🏗️',
            'bases-datos': '🗄️',
            'desarrollo-web': '🌐',
            'desarrollo-movil': '📱',
            'devops': '🔧',
            'arquitectura': '🏛️',
            'algoritmos': '🧮',
            'testing': '🧪'
        };
        return iconMapping[section] || '📚';
    }

    getColumnForSection(section) {
        const columnMapping = {
            'lenguajes': 1,
            'frameworks': 1,
            'bases-datos': 1,
            'desarrollo-web': 2,
            'desarrollo-movil': 2,
            'devops': 2,
            'arquitectura': 3,
            'algoritmos': 3,
            'testing': 3
        };
        return columnMapping[section] || 1;
    }

    buildIndex() {
        const indexContainer = document.getElementById('dynamic-index');
        console.log('🔍 IndexContainer encontrado:', !!indexContainer);
        
        if (!indexContainer) {
            console.error('❌ No se encontró el elemento dynamic-index');
            return;
        }
        
        // Filtrar solo páginas de programación
        const programmingPages = this.searchIndex?.filter((page) => page.category === 'Programación') || [];
        console.log('📊 Páginas de programación encontradas:', programmingPages.length);
        
        // Actualizar estadísticas en el hero
        this.updateHeroStats(programmingPages.length, Object.keys(this.sections || {}).length);
        
        // Agrupar por columnas
        const columns = { 1: [], 2: [], 3: [] };
        
        // Organizar secciones por columnas
        Object.entries(this.sections || {}).forEach(([sectionKey, section]) => {
            const columnNum = section?.column || 1;
            if (!columns[columnNum]) columns[columnNum] = [];
            
            const sectionPages = programmingPages
                .filter((page) => page.section === sectionKey)
                .sort((a, b) => (a.order || 999) - (b.order || 999));
            
            columns[columnNum].push({
                sectionKey,
                section,
                pages: sectionPages
            });
        });

        // Si no hay páginas, mostrar placeholder
        if (programmingPages.length === 0) {
            indexContainer.innerHTML = `
                <div class="loading-wrapper">
                    <div class="loading-animation">
                        <div style="color: #f59e0b; font-size: 2rem; margin-bottom: 20px;">📝</div>
                        <p style="color: #f59e0b;">Sección en desarrollo</p>
                        <p style="color: rgba(255,255,255,0.6); font-size: 0.9rem;">Los contenidos de programación estarán disponibles próximamente</p>
                    </div>
                </div>
            `;
            return;
        }

        // Construir HTML
        let html = '';
        
        // Obtener todas las secciones y ordenarlas
        const allSections = [];
        for (let col = 1; col <= 3; col++) {
            const columnData = columns[col];
            if (columnData && columnData.length > 0) {
                allSections.push(...columnData);
            }
        }
        
        // Ordenar por prioridad y construir HTML
        allSections
            .sort((a, b) => (a.section?.order || 999) - (b.section?.order || 999))
            .forEach(({ sectionKey, section, pages }) => {
                html += this.buildSectionHTML(section, pages, sectionKey);
            });

        indexContainer.innerHTML = html;
        
        // Aplicar animaciones a los elementos li
        this.animateListItems();
        
        // Añadir event listeners
        this.addEventListeners();
    }

    updateHeroStats(topicsCount, sectionsCount) {
        const topicsElement = document.getElementById('topics-count');
        const sectionsElement = document.getElementById('sections-count');
        
        if (topicsElement) {
            this.animateNumber(topicsElement, topicsCount);
        }
        
        if (sectionsElement) {
            this.animateNumber(sectionsElement, sectionsCount);
        }
    }

    animateNumber(element, target) {
        const duration = 1000;
        const start = 0;
        const startTime = performance.now();
        
        const animate = (currentTime) => {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            
            const easeOutCubic = 1 - Math.pow(1 - progress, 3);
            const current = Math.floor(start + (target - start) * easeOutCubic);
            
            element.textContent = current;
            
            if (progress < 1) {
                requestAnimationFrame(animate);
            } else {
                element.textContent = target;
            }
        };
        
        requestAnimationFrame(animate);
    }

    buildSectionHTML(section, pages, sectionKey) {
        const total = pages?.length || 0;
        const initialVisible = 12;
        const isDense = total > 20;

        let html = `
            <div class="category-section" data-section="${sectionKey}">
                <h2><span class="icon">${section?.icon || '📚'}</span> ${section?.name || 'Sin nombre'}</h2>
                <ul class="topic-list ${isDense ? 'dense' : ''}" style="list-style: none !important; margin: 0; padding: 0;">
        `;

        pages?.forEach((page, idx) => {
            const statusClass = page.status || 'planned';
            const isLink = page.url && (page.status === 'completed' || page.status === 'interactive');
            const hiddenClass = idx >= initialVisible ? 'hidden-item' : '';
            
            if (isLink) {
                html += `
                    <li class="topic-item ${hiddenClass}" style="list-style: none !important; list-style-type: none !important; margin: 0 !important; padding: 0 !important; display: block;">
                        <a href="${page.url}" class="topic-link ${statusClass}" data-title="${page.title || ''}">
                            ${page.icon || '📄'} ${page.title || 'Sin título'}
                        </a>
                    </li>
                `;
            } else {
                html += `
                    <li class="topic-item ${hiddenClass}" style="list-style: none !important; list-style-type: none !important; margin: 0 !important; padding: 0 !important; display: block;">
                        <span class="topic-link ${statusClass}" data-title="${page.title || ''}">
                            ${page.icon || '📄'} ${page.title || 'Sin título'}
                        </span>
                    </li>
                `;
            }
        });

        html += `
                </ul>
                ${total > 0 ? `
                <div class="section-more">
                    <button class="show-more-btn" type="button" data-section="${sectionKey}" aria-expanded="false">
                        Ver más (${total})
                    </button>
                </div>
                ` : ''}
            </div>
        `;

        return html;
    }

    animateListItems() {
        const listItems = document.querySelectorAll('.topic-item');
        listItems.forEach((item, index) => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.6s ease';
            item.style.animationDelay = `${index * 0.1}s`;
            
            setTimeout(() => {
                item.style.opacity = '1';
                item.style.transform = 'translateY(0)';
            }, index * 100 + 200);
        });
    }

    addEventListeners() {
        // Event listeners para tracking y animaciones
        const topicLinks = document.querySelectorAll('.topic-link');
        topicLinks.forEach((link) => {
            // Efecto ripple al hacer clic
            link.addEventListener('click', function(e) {
                if (this instanceof HTMLElement && this.textContent) {
                    const title = this.textContent.trim();
                    console.log(`Topic clicked: ${title}`);
                    
                    // Crear efecto ripple
                    const ripple = document.createElement('span');
                    const rect = this.getBoundingClientRect();
                    const size = Math.max(rect.width, rect.height);
                    const x = e.clientX - rect.left - size / 2;
                    const y = e.clientY - rect.top - size / 2;
                    
                    ripple.style.cssText = `
                        position: absolute;
                        border-radius: 50%;
                        background: rgba(245, 158, 11, 0.3);
                        width: ${size}px;
                        height: ${size}px;
                        left: ${x}px;
                        top: ${y}px;
                        transform: scale(0);
                        animation: ripple-effect 0.6s ease-out;
                        pointer-events: none;
                        z-index: 1;
                    `;
                    
                    this.appendChild(ripple);
                    
                    // Remover el ripple después de la animación
                    setTimeout(() => {
                        if (ripple.parentNode) {
                            ripple.parentNode.removeChild(ripple);
                        }
                    }, 600);
                }
            });

            // Agregar clase para animación de entrada
            link.classList.add('fade-in');

            // Efecto de entrada suave cuando aparecen los elementos
            const observer = new IntersectionObserver((entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        entry.target.classList.remove('fade-in');
                        entry.target.style.animation = 'topic-slide-in 0.6s ease forwards';
                        observer.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.1 });

            observer.observe(link);
        });

        // Botón Ver más por sección -> abrir overlay
        const moreButtons = document.querySelectorAll('.show-more-btn');
        moreButtons.forEach((btn) => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                const sectionKey = btn.getAttribute('data-section');
                if (sectionKey) this.openSectionOverlay(sectionKey);
            });
        });

        // Click en el título de la sección -> abrir overlay
        const sectionHeaders = document.querySelectorAll('.category-section h2');
        sectionHeaders.forEach((hdr) => {
            hdr.style.cursor = 'pointer';
            hdr.addEventListener('click', () => {
                const wrapper = hdr.closest('.category-section');
                const sectionKey = wrapper?.getAttribute('data-section');
                if (sectionKey) this.openSectionOverlay(sectionKey);
            });
        });
    }

    // Overlay con lista completa de una sección
    openSectionOverlay(sectionKey) {
        const section = (this.sections && this.sections[sectionKey]) || null;
        const pages = (this.searchIndex || []).filter(p => p.category === 'Programación' && p.section === sectionKey);

        // Crear backdrop
        const backdrop = document.createElement('div');
        backdrop.className = 'section-overlay-backdrop';
        backdrop.innerHTML = this.buildOverlayHTML(sectionKey, section, pages);
        document.body.appendChild(backdrop);

        // Bloquear scroll
        const prevOverflow = document.body.style.overflow;
        document.body.style.overflow = 'hidden';

        // Animar entrada
        requestAnimationFrame(() => {
            backdrop.classList.add('visible');
        });

        // Cerrar handlers
        const close = () => {
            backdrop.classList.remove('visible');
            setTimeout(() => {
                backdrop.remove();
                document.body.style.overflow = prevOverflow || '';
            }, 200);
        };

        backdrop.addEventListener('click', (e) => {
            if (e.target === backdrop) close();
        });

        backdrop.querySelectorAll('[data-close-overlay]')?.forEach(btn => {
            btn.addEventListener('click', close);
        });

        document.addEventListener('keydown', function escHandler(ev) {
            if (ev.key === 'Escape') {
                close();
                document.removeEventListener('keydown', escHandler);
            }
        });
    }

    buildOverlayHTML(sectionKey, section, pages) {
        const total = pages.length;
        const title = section?.name || 'Sección';
        const icon = section?.icon || '📚';

        const items = pages.map(page => {
            const statusClass = page.status || 'planned';
            const isLink = page.url && (page.status === 'completed' || page.status === 'interactive');
            const content = `${page.icon || '📄'} ${page.title || 'Sin título'}`;
            return isLink 
                ? `<a class="topic-link ${statusClass}" href="${page.url}">${content}</a>`
                : `<span class="topic-link ${statusClass}">${content}</span>`;
        }).join('');

        return `
            <div class="section-overlay">
                <div class="overlay-card">
                    <div class="overlay-header">
                        <div class="overlay-title"><span class="icon">${icon}</span> ${title}</div>
                        <div class="overlay-meta">${total} temas</div>
                        <button class="overlay-close" data-close-overlay aria-label="Cerrar">×</button>
                    </div>
                    <div class="overlay-content">
                        <div class="overlay-grid">${items}</div>
                    </div>
                </div>
            </div>
        `;
    }

    showError() {
        const indexContainer = document.getElementById('dynamic-index');
        if (indexContainer) {
            indexContainer.innerHTML = `
                <div class="loading-wrapper">
                    <div class="loading-animation">
                        <div style="color: #ff6b6b; font-size: 2rem; margin-bottom: 20px;">⚠️</div>
                        <p style="color: #ff6b6b;">Error cargando el contenido</p>
                        <p style="color: rgba(255,255,255,0.6); font-size: 0.9rem;">Revisa la consola para más detalles</p>
                    </div>
                </div>
            `;
        }
    }
}

// Función de scroll suave al contenido
function scrollToContent() {
    setTimeout(() => {
        const contentSection = document.querySelector('.content-section');
        if (contentSection) {
            contentSection.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    }, 2500);
}

// Animación de entrada al hero
function animateHeroEntrance() {
    const heroContent = document.querySelector('.hero-content');
    const heroBackground = document.querySelector('.hero-background');
    
    if (heroContent && heroBackground) {
        heroContent.style.opacity = '0';
        heroContent.style.transform = 'translateY(50px)';
        heroBackground.style.opacity = '0';
        
        setTimeout(() => {
            heroBackground.style.transition = 'opacity 1s ease';
            heroBackground.style.opacity = '1';
        }, 100);
        
        setTimeout(() => {
            heroContent.style.transition = 'all 1s cubic-bezier(0.4, 0, 0.2, 1)';
            heroContent.style.opacity = '1';
            heroContent.style.transform = 'translateY(0)';
        }, 500);
    }
}

// Inicializar cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', function() {
    animateHeroEntrance();
    new ProgrammingIndex();
    scrollToContent();
});
</script>
