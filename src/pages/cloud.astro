---
// P√°gina de Cloud integrada al dise√±o general
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";
import CategorySearch from "../components/CategorySearch.astro";
import "../styles/global.css";
import "../styles/cloud.css";

const title = "Cloud - √çndice de Temas";
const description = "√çndice din√°mico de todos los temas de cloud cargado autom√°ticamente";
---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} | Knowledge Base</title>
    <meta name="description" content={description}>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg">
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">
</head>

<body>
    <Navbar />

    <!-- Main Content -->
    <main class="cloud-main">
      <div class="cloud-page">
        <!-- Hero Section -->
        <section class="hero-section">
            <div class="hero-background">
                <div class="hero-grid"></div>
                <div class="hero-glow"></div>
            </div>
            <div class="hero-content">
                <div class="hero-badge">
                    <span class="badge-icon">‚òÅÔ∏è</span>
                    <span class="badge-text">Knowledge Base</span>
                </div>
                
                <h1 class="hero-title">
                    <span class="title-text">Cloud</span>
                </h1>
                
                <p class="hero-description">
                    Explora servicios en la nube, arquitecturas cloud y plataformas como AWS, Azure y Google Cloud.
                    Desde conceptos fundamentales hasta implementaciones empresariales.
                </p>
                
                <div class="hero-stats">
                    <div class="stat-item">
                        <span class="stat-number" id="topics-count">-</span>
                        <span class="stat-label">Temas</span>
                    </div>
                    <div class="stat-divider"></div>
                    <div class="stat-item">
                        <span class="stat-number" id="sections-count">-</span>
                        <span class="stat-label">Secciones</span>
                    </div>
                </div>
            </div>
        </section>

        <!-- Content Grid -->
        <section class="content-section">
            <div class="content-container">
                <div class="section-header">
                    <h2 class="section-title">Contenido Organizado</h2>
                    <p class="section-subtitle">
                        Navega por los diferentes temas organizados por categor√≠as especializadas
                    </p>
                    
                    <!-- B√∫squeda por categor√≠a -->
                    <CategorySearch category="cloud" placeholder="Buscar en Cloud..." />
                </div>
                
                <!-- Dynamic Index -->
                <div class="index-grid" id="dynamic-index">
                    <!-- Loading State -->
                    <div class="loading-wrapper">
                        <div class="loading-animation">
                            <div class="loading-dots">
                                <div class="dot dot-1"></div>
                                <div class="dot dot-2"></div>
                                <div class="dot dot-3"></div>
                            </div>
                            <p class="loading-text">Cargando contenido...</p>
                        </div>
                    </div>
                </div>
            </div>
        </section>
      </div>
    </main>

    <Footer />

<script>
class CloudIndex {
    constructor() {
        this.searchIndex = [];
        this.sections = {};
        this.init();
    }

    async init() {
        console.log('üöÄ Iniciando CloudIndex...');
        try {
            await this.loadSearchIndex();
            console.log('‚úÖ JSON cargado exitosamente');
            this.buildIndex();
            console.log('‚úÖ √çndice construido');
            console.log('‚úÖ Inicializaci√≥n completa');
        } catch (error) {
            console.error('‚ùå Error inicializando √≠ndice:', error);
            this.showError();
        }
    }

    async loadSearchIndex() {
        try {
            const response = await fetch('/search-cloud.json');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            this.searchIndex = data.pages;
            this.sections = this.generateSectionsFromPages();
            console.log('√çndice de cloud cargado:', this.searchIndex.length, 'p√°ginas');
        } catch (error) {
            console.error('Error cargando √≠ndice de cloud:', error);
            throw error;
        }
    }

    generateSectionsFromPages() {
        const sectionsMap = {};
        this.searchIndex?.forEach((page) => {
            if (page.category === 'Cloud' && page.section) {
                if (!sectionsMap[page.section]) {
                    sectionsMap[page.section] = {
                        name: this.sectionNameFromKey(page.section),
                        icon: this.getSectionIcon(page.section),
                        description: `Temas relacionados con ${this.sectionNameFromKey(page.section).toLowerCase()}`,
                        column: this.getColumnForSection(page.section),
                        order: 1
                    };
                }
            }
        });
        return sectionsMap;
    }

    sectionNameFromKey(key) {
        const mapping = {
            'aws': 'Amazon Web Services',
            'azure': 'Microsoft Azure',
            'gcp': 'Google Cloud Platform',
            'fundamentos': 'Fundamentos Cloud',
            'arquitectura': 'Arquitectura Cloud',
            'seguridad': 'Seguridad Cloud',
            'devops': 'DevOps en la Nube'
        };
        return mapping[key] || key.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    }

    getSectionIcon(section) {
        const iconMapping = {
            'aws': '‚òÅÔ∏è',
            'azure': 'üî∑',
            'gcp': 'üîµ',
            'fundamentos': 'üìö',
            'arquitectura': 'üèóÔ∏è',
            'seguridad': 'üîí',
            'devops': '‚ö°'
        };
        return iconMapping[section] || '‚òÅÔ∏è';
    }

    getColumnForSection(section) {
        const columnMapping = {
            'aws': 1,
            'azure': 1,
            'gcp': 1,
            'fundamentos': 2,
            'arquitectura': 2,
            'seguridad': 3,
            'devops': 3
        };
        return columnMapping[section] || 1;
    }

    buildIndex() {
        const indexContainer = document.getElementById('dynamic-index');
        console.log('üîç IndexContainer encontrado:', !!indexContainer);
        
        if (!indexContainer) {
            console.error('‚ùå No se encontr√≥ el elemento dynamic-index');
            return;
        }
        
        // Filtrar solo p√°ginas de cloud
        const cloudPages = this.searchIndex?.filter((page) => page.category === 'Cloud') || [];
        console.log('üìä P√°ginas de cloud encontradas:', cloudPages.length);
        
        // Actualizar estad√≠sticas en el hero
        this.updateHeroStats(cloudPages.length, Object.keys(this.sections || {}).length);
        
        // Agrupar por columnas
        const columns = { 1: [], 2: [], 3: [] };
        
        // Organizar secciones por columnas
        Object.entries(this.sections || {}).forEach(([sectionKey, section]) => {
            const columnNum = section?.column || 1;
            if (!columns[columnNum]) columns[columnNum] = [];
            
            const sectionPages = cloudPages
                .filter((page) => page.section === sectionKey)
                .sort((a, b) => (a.order || 999) - (b.order || 999));
            
            columns[columnNum].push({
                sectionKey,
                section,
                pages: sectionPages
            });
        });

        // Si no hay p√°ginas, mostrar placeholder
        if (cloudPages.length === 0) {
            indexContainer.innerHTML = `
                <div class="loading-wrapper">
                    <div class="loading-animation">
                        <div style="color: #6366f1; font-size: 2rem; margin-bottom: 20px;">üìù</div>
                        <p style="color: #6366f1;">Secci√≥n en desarrollo</p>
                        <p style="color: rgba(255,255,255,0.6); font-size: 0.9rem;">Los contenidos de cloud estar√°n disponibles pr√≥ximamente</p>
                    </div>
                </div>
            `;
            return;
        }

        // Construir HTML
        let html = '';
        
        // Obtener todas las secciones y ordenarlas
        const allSections = [];
        for (let col = 1; col <= 3; col++) {
            const columnData = columns[col];
            if (columnData && columnData.length > 0) {
                allSections.push(...columnData);
            }
        }
        
        // Ordenar por prioridad y construir HTML
        allSections
            .sort((a, b) => (a.section?.order || 999) - (b.section?.order || 999))
            .forEach(({ sectionKey, section, pages }) => {
                html += this.buildSectionHTML(section, pages, sectionKey);
            });

        indexContainer.innerHTML = html;
        
        // Aplicar animaciones a los elementos li
        this.animateListItems();
        
        // A√±adir event listeners
        this.addEventListeners();
    }

    updateHeroStats(topicsCount, sectionsCount) {
        const topicsElement = document.getElementById('topics-count');
        const sectionsElement = document.getElementById('sections-count');
        
        if (topicsElement) {
            this.animateNumber(topicsElement, topicsCount);
        }
        
        if (sectionsElement) {
            this.animateNumber(sectionsElement, sectionsCount);
        }
    }

    animateNumber(element, target) {
        const duration = 1000;
        const start = 0;
        const startTime = performance.now();
        
        const animate = (currentTime) => {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            
            const easeOutCubic = 1 - Math.pow(1 - progress, 3);
            const current = Math.floor(start + (target - start) * easeOutCubic);
            
            element.textContent = current;
            
            if (progress < 1) {
                requestAnimationFrame(animate);
            }
        };
        
        requestAnimationFrame(animate);
    }

    buildSectionHTML(section, pages, sectionKey) {
        const total = pages.length;
        const title = section?.name || 'Secci√≥n';
        const icon = section?.icon || 'üìö';
        const description = section?.description || 'Temas de esta secci√≥n';

        const items = pages.map(page => {
            const statusClass = page.status || 'planned';
            const isLink = page.url && (page.status === 'completed' || page.status === 'interactive');
            const content = `${page.icon || 'üìÑ'} ${page.title || 'Sin t√≠tulo'}`;
            return isLink 
                ? `<a class="topic-link ${statusClass}" href="${page.url}">${content}</a>`
                : `<span class="topic-link ${statusClass}">${content}</span>`;
        }).join('');

        return `
            <div class="index-section" data-section="${sectionKey}">
                <div class="section-header">
                    <div class="section-title">
                        <span class="section-icon">${icon}</span>
                        <h3>${title}</h3>
                    </div>
                    <div class="section-meta">
                        <span class="section-count">${total} temas</span>
                        <button class="section-expand" data-expand-section="${sectionKey}" aria-label="Expandir secci√≥n">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <polyline points="6,9 12,15 18,9"></polyline>
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="section-content">
                    <p class="section-description">${description}</p>
                    <ul class="topics-list">${items}</ul>
                </div>
            </div>
        `;
    }

    animateListItems() {
        const listItems = document.querySelectorAll('.topics-list li');
        listItems.forEach((item, index) => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                item.style.transition = 'all 0.3s ease';
                item.style.opacity = '1';
                item.style.transform = 'translateY(0)';
            }, index * 100);
        });
    }

    addEventListeners() {
        // Event listeners para expandir/contraer secciones
        document.querySelectorAll('[data-expand-section]').forEach(button => {
            button.addEventListener('click', (e) => {
                const sectionKey = e.target.closest('[data-expand-section]').getAttribute('data-expand-section');
                this.toggleSection(sectionKey);
            });
        });
    }

    toggleSection(sectionKey) {
        const section = document.querySelector(`[data-section="${sectionKey}"]`);
        const button = document.querySelector(`[data-expand-section="${sectionKey}"]`);
        
        if (section && button) {
            const isExpanded = section.classList.contains('expanded');
            
            if (isExpanded) {
                section.classList.remove('expanded');
                button.style.transform = 'rotate(0deg)';
            } else {
                section.classList.add('expanded');
                button.style.transform = 'rotate(180deg)';
            }
        }
    }

    showError() {
        const indexContainer = document.getElementById('dynamic-index');
        if (indexContainer) {
            indexContainer.innerHTML = `
                <div class="loading-wrapper">
                    <div class="loading-animation">
                        <div style="color: #ff6b6b; font-size: 2rem; margin-bottom: 20px;">‚ö†Ô∏è</div>
                        <p style="color: #ff6b6b;">Error cargando el contenido</p>
                        <p style="color: rgba(255,255,255,0.6); font-size: 0.9rem;">Revisa la consola para m√°s detalles</p>
                    </div>
                </div>
            `;
        }
    }
}

// Funci√≥n de scroll suave al contenido
function scrollToContent() {
    setTimeout(() => {
        const contentSection = document.querySelector('.content-section');
        if (contentSection) {
            contentSection.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    }, 2500);
}

// Animaci√≥n de entrada al hero
function animateHeroEntrance() {
    const heroContent = document.querySelector('.hero-content');
    const heroBackground = document.querySelector('.hero-background');
    
    if (heroContent && heroBackground) {
        heroContent.style.opacity = '0';
        heroContent.style.transform = 'translateY(50px)';
        heroBackground.style.opacity = '0';
        
        setTimeout(() => {
            heroBackground.style.transition = 'opacity 1s ease';
            heroBackground.style.opacity = '1';
        }, 100);
        
        setTimeout(() => {
            heroContent.style.transition = 'all 1s cubic-bezier(0.4, 0, 0.2, 1)';
            heroContent.style.opacity = '1';
            heroContent.style.transform = 'translateY(0)';
        }, 500);
    }
}

// Inicializar cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', function() {
    animateHeroEntrance();
    new CloudIndex();
    scrollToContent();
});
</script>
<style>
/* Estilos espec√≠ficos para Cloud */
.cloud-main {
    min-height: 100vh;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.cloud-page {
    position: relative;
    z-index: 1;
}

.hero-section {
    position: relative;
    padding: 120px 0 80px;
    overflow: hidden;
}

.hero-background {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    opacity: 0.9;
}

.hero-grid {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: 
        linear-gradient(rgba(255,255,255,0.1) 1px, transparent 1px),
        linear-gradient(90deg, rgba(255,255,255,0.1) 1px, transparent 1px);
    background-size: 50px 50px;
    animation: gridMove 20s linear infinite;
}

@keyframes gridMove {
    0% { transform: translate(0, 0); }
    100% { transform: translate(50px, 50px); }
}

.hero-glow {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 600px;
    height: 600px;
    background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
    border-radius: 50%;
    animation: glowPulse 4s ease-in-out infinite;
}

@keyframes glowPulse {
    0%, 100% { opacity: 0.3; transform: translate(-50%, -50%) scale(1); }
    50% { opacity: 0.6; transform: translate(-50%, -50%) scale(1.1); }
}

.hero-content {
    position: relative;
    z-index: 2;
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
    padding: 0 20px;
}

.hero-badge {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    background: rgba(255,255,255,0.15);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255,255,255,0.2);
    border-radius: 50px;
    padding: 8px 16px;
    margin-bottom: 24px;
    font-size: 14px;
    font-weight: 500;
    color: white;
}

.badge-icon {
    font-size: 16px;
}

.hero-title {
    font-size: 4rem;
    font-weight: 800;
    color: white;
    margin-bottom: 24px;
    line-height: 1.1;
}

.title-text {
    background: linear-gradient(135deg, #fff 0%, #e0e7ff 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.hero-description {
    font-size: 1.25rem;
    color: rgba(255,255,255,0.9);
    margin-bottom: 40px;
    line-height: 1.6;
}

.hero-stats {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 40px;
    margin-top: 40px;
}

.stat-item {
    text-align: center;
}

.stat-number {
    display: block;
    font-size: 2.5rem;
    font-weight: 700;
    color: white;
    line-height: 1;
}

.stat-label {
    font-size: 0.9rem;
    color: rgba(255,255,255,0.7);
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.stat-divider {
    width: 1px;
    height: 40px;
    background: rgba(255,255,255,0.2);
}

.content-section {
    background: white;
    padding: 80px 0;
    position: relative;
}

.content-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

/* Header de la secci√≥n de contenido principal */
.content-section .section-header {
    text-align: center;
    margin-bottom: 60px;
}

.content-section .section-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 16px;
}

.content-section .section-subtitle {
    font-size: 1.1rem;
    color: #6b7280;
    margin-bottom: 40px;
}

.index-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 30px;
}

.index-section {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 16px;
    padding: 24px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
}

.index-section:hover {
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
}

/* Header de cada secci√≥n individual */
.index-section .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
}

.index-section .section-title {
    display: flex;
    align-items: center;
    gap: 12px;
    margin: 0;
}

.section-icon {
    font-size: 1.5rem;
}

.index-section .section-title h3 {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1f2937;
    margin: 0;
}

.section-meta {
    display: flex;
    align-items: center;
    gap: 12px;
}

.section-count {
    font-size: 0.875rem;
    color: #6b7280;
    background: #f3f4f6;
    padding: 4px 8px;
    border-radius: 6px;
}

.section-expand {
    background: none;
    border: none;
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
    transition: all 0.2s ease;
    color: #6b7280;
}

.section-expand:hover {
    background: #f3f4f6;
    color: #374151;
}

.section-content {
    overflow: hidden;
    transition: all 0.3s ease;
}

.section-description {
    font-size: 0.9rem;
    color: #6b7280;
    margin-bottom: 16px;
    line-height: 1.5;
}

.topics-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.topic-link {
    display: block;
    padding: 12px 16px;
    margin-bottom: 8px;
    background: #f9fafb;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    text-decoration: none;
    color: #374151;
    font-size: 0.9rem;
    transition: all 0.2s ease;
}

.topic-link:hover {
    background: #f3f4f6;
    border-color: #d1d5db;
    transform: translateX(4px);
}

.topic-link.completed {
    background: #ecfdf5;
    border-color: #a7f3d0;
    color: #065f46;
}

.topic-link.interactive {
    background: #eff6ff;
    border-color: #93c5fd;
    color: #1e40af;
}

.topic-link.planned {
    background: #fef3c7;
    border-color: #fcd34d;
    color: #92400e;
}

.loading-wrapper {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 200px;
}

.loading-animation {
    text-align: center;
}

.loading-dots {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-bottom: 16px;
}

.dot {
    width: 8px;
    height: 8px;
    background: #6366f1;
    border-radius: 50%;
    animation: dotPulse 1.4s ease-in-out infinite both;
}

.dot-1 { animation-delay: -0.32s; }
.dot-2 { animation-delay: -0.16s; }
.dot-3 { animation-delay: 0s; }

@keyframes dotPulse {
    0%, 80%, 100% { transform: scale(0); }
    40% { transform: scale(1); }
}

.loading-text {
    color: #6b7280;
    font-size: 0.9rem;
}

@media (max-width: 768px) {
    .hero-title {
        font-size: 2.5rem;
    }
    
    .hero-description {
        font-size: 1.1rem;
    }
    
    .hero-stats {
        gap: 20px;
    }
    
    .stat-number {
        font-size: 2rem;
    }
    
    .index-grid {
        grid-template-columns: 1fr;
    }
    
    .index-section .section-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 12px;
    }
}
</style>

