---
import WikiLayout from '../../../layouts/WikiLayout.astro';
---

<WikiLayout title="Criptograf√≠a Interactiva" description="Juega, experimenta y aprende criptograf√≠a de forma divertida">
    <div class="crypto-interactive-page">
        <div class="container">
            <!-- Header -->
            <div class="header">
                <h1>üéÆ Criptograf√≠a Interactiva</h1>
                <p>¬°Juega, experimenta y aprende criptograf√≠a de forma divertida!</p>
            </div>

            <!-- Encriptador/Desencriptador en tiempo real -->
            <div class="section">
                <div class="section-title">
                    <div class="icon">üîê</div>
                    <h2>Encriptador C√©sar en Tiempo Real</h2>
                </div>
                <div class="crypto-tool">
                    <div class="input-group">
                        <label for="messageInput">Tu mensaje secreto:</label>
                        <textarea id="messageInput" placeholder="Escribe aqu√≠ tu mensaje...">Hola Mundo</textarea>
                    </div>
                    <div class="controls">
                        <label for="shiftValue">Desplazamiento (1-25):</label>
                        <input type="range" id="shiftValue" min="1" max="25" value="3">
                        <span id="shiftDisplay">3</span>
                    </div>
                    <div class="output-group">
                        <label>Mensaje cifrado:</label>
                        <div id="encryptedOutput" class="output-box">Kreo Pxqgr</div>
                    </div>
                    <button id="copyEncrypted" class="copy-btn">üìã Copiar</button>
                </div>
            </div>

            <!-- Medidor de Fortaleza de Contrase√±as -->
            <div class="section">
                <div class="section-title">
                    <div class="icon">üõ°Ô∏è</div>
                    <h2>Medidor de Fortaleza de Contrase√±as</h2>
                </div>
                <div class="password-tool">
                    <div class="input-group">
                        <label for="passwordInput">Prueba tu contrase√±a:</label>
                        <div class="password-container">
                            <input type="password" id="passwordInput" placeholder="Ingresa una contrase√±a...">
                            <button id="togglePassword" class="toggle-btn">üëÅÔ∏è</button>
                        </div>
                    </div>
                    <div class="strength-meter">
                        <div id="strengthBar" class="strength-bar"></div>
                    </div>
                    <div id="strengthText" class="strength-text">Ingresa una contrase√±a</div>
                    <div class="password-tips">
                        <h4>Tips para una contrase√±a fuerte:</h4>
                        <ul id="tipsList">
                            <li id="tip-length" class="tip-item">Al menos 8 caracteres</li>
                            <li id="tip-upper" class="tip-item">May√∫sculas (A-Z)</li>
                            <li id="tip-lower" class="tip-item">Min√∫sculas (a-z)</li>
                            <li id="tip-number" class="tip-item">N√∫meros (0-9)</li>
                            <li id="tip-special" class="tip-item">S√≠mbolos (!@#$%)</li>
                        </ul>
                    </div>
                    <button id="generatePassword" class="generate-btn">üé≤ Generar Contrase√±a Segura</button>
                </div>
            </div>

            <!-- Quiz Interactivo -->
            <div class="section">
                <div class="section-title">
                    <div class="icon">üß†</div>
                    <h2>Quiz: ¬øQu√© tanto sabes de Criptograf√≠a?</h2>
                </div>
                <div class="quiz-container">
                    <div id="quizQuestion" class="quiz-question"></div>
                    <div id="quizOptions" class="quiz-options"></div>
                    <div id="quizResult" class="quiz-result"></div>
                    <div class="quiz-controls">
                        <button id="prevQuestion" class="quiz-btn secondary">‚¨ÖÔ∏è Anterior</button>
                        <span id="questionCounter" class="question-counter">1 / 5</span>
                        <button id="nextQuestion" class="quiz-btn primary">Siguiente ‚û°Ô∏è</button>
                    </div>
                    <div id="quizScore" class="quiz-score"></div>
                </div>
            </div>

            <!-- Simulador de Hash -->
            <div class="section">
                <div class="section-title">
                    <div class="icon">üßÆ</div>
                    <h2>Simulador de Hash (MD5 y SHA-256)</h2>
                </div>
                <div class="hash-tool">
                    <div class="input-group">
                        <label for="hashInput">Texto para hashear:</label>
                        <textarea id="hashInput" placeholder="Escribe cualquier texto...">Mi texto secreto</textarea>
                    </div>
                    <div class="hash-outputs">
                        <div class="hash-result">
                            <label>MD5:</label>
                            <div id="md5Output" class="hash-output"></div>
                            <button class="copy-btn-small" data-target="md5Output">üìã</button>
                        </div>
                        <div class="hash-result">
                            <label>SHA-256:</label>
                            <div id="sha256Output" class="hash-output"></div>
                            <button class="copy-btn-small" data-target="sha256Output">üìã</button>
                        </div>
                    </div>
                    <div class="hash-info">
                        <p><strong>üí° Dato curioso:</strong> Aunque cambies una sola letra, el hash ser√° completamente diferente. ¬°Pru√©balo!</p>
                    </div>
                </div>
            </div>

            <!-- Decodificador Base64 -->
            <div class="section">
                <div class="section-title">
                    <div class="icon">üîÑ</div>
                    <h2>Codificador/Decodificador Base64</h2>
                </div>
                <div class="base64-tool">
                    <div class="tool-tabs">
                        <button id="encodeTab" class="tab-btn active">Codificar</button>
                        <button id="decodeTab" class="tab-btn">Decodificar</button>
                    </div>
                    <div id="encodePanel" class="tab-panel active">
                        <div class="input-group">
                            <label for="base64Input">Texto normal:</label>
                            <textarea id="base64Input" placeholder="Texto a codificar...">Mensaje secreto</textarea>
                        </div>
                        <div class="output-group">
                            <label>Base64:</label>
                            <div id="base64Output" class="output-box">TWVuc2FqZSBzZWNyZXRv</div>
                            <button class="copy-btn-small" data-target="base64Output">üìã</button>
                        </div>
                    </div>
                    <div id="decodePanel" class="tab-panel">
                        <div class="input-group">
                            <label for="base64DecodeInput">Base64:</label>
                            <textarea id="base64DecodeInput" placeholder="Base64 a decodificar..."></textarea>
                        </div>
                        <div class="output-group">
                            <label>Texto decodificado:</label>
                            <div id="base64DecodeOutput" class="output-box"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Estad√≠sticas del Usuario -->
            <div class="section">
                <div class="section-title">
                    <div class="icon">üìä</div>
                    <h2>Tus Estad√≠sticas de Aprendizaje</h2>
                </div>
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number" id="messagesEncrypted">0</div>
                        <div class="stat-label">Mensajes Cifrados</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="passwordsChecked">0</div>
                        <div class="stat-label">Contrase√±as Analizadas</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="quizScoreDisplay">0%</div>
                        <div class="stat-label">Puntuaci√≥n del Quiz</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="hashesGenerated">0</div>
                        <div class="stat-label">Hashes Generados</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</WikiLayout>

<script>
    // Variables globales para estad√≠sticas
    let stats = {
        messagesEncrypted: 0,
        passwordsChecked: 0,
        quizCorrect: 0,
        quizTotal: 0,
        hashesGenerated: 0
    };

    // Preguntas del quiz
    const quizQuestions = [
        {
            question: "¬øCu√°l es el algoritmo de cifrado m√°s seguro actualmente?",
            options: ["DES", "AES", "MD5", "RC4"],
            correct: 1,
            explanation: "AES (Advanced Encryption Standard) es el est√°ndar actual m√°s seguro y ampliamente usado."
        },
        {
            question: "¬øQu√© significa PKI?",
            options: ["Personal Key Interface", "Public Key Infrastructure", "Private Key Integration", "Protected Key Implementation"],
            correct: 1,
            explanation: "PKI significa Public Key Infrastructure (Infraestructura de Clave P√∫blica)."
        },
        {
            question: "¬øCu√°l es la diferencia principal entre cifrado sim√©trico y asim√©trico?",
            options: ["El tama√±o de la clave", "El n√∫mero de claves usadas", "La velocidad", "El algoritmo"],
            correct: 1,
            explanation: "El cifrado sim√©trico usa una clave, el asim√©trico usa un par de claves (p√∫blica y privada)."
        },
        {
            question: "¬øQu√© es un hash?",
            options: ["Un tipo de cifrado reversible", "Una funci√≥n de una sola direcci√≥n", "Una clave privada", "Un algoritmo de compresi√≥n"],
            correct: 1,
            explanation: "Un hash es una funci√≥n matem√°tica de una sola direcci√≥n que produce un valor fijo √∫nico."
        },
        {
            question: "¬øPara qu√© se usa principalmente Base64?",
            options: ["Cifrado seguro", "Compresi√≥n de datos", "Codificaci√≥n de datos", "Generaci√≥n de claves"],
            correct: 2,
            explanation: "Base64 se usa para codificar datos binarios en texto ASCII, no para cifrado."
        }
    ];

    let currentQuestion = 0;
    let userAnswers = [];

    // Cifrado C√©sar
    function caesarCipher(text, shift) {
        return text.replace(/[a-zA-Z]/g, function(char) {
            const start = char <= 'Z' ? 65 : 97;
            return String.fromCharCode(((char.charCodeAt(0) - start + shift) % 26) + start);
        });
    }

    function updateCaesarCipher() {
        const messageInput = document.getElementById('messageInput');
        const shiftValue = document.getElementById('shiftValue');
        const encryptedOutput = document.getElementById('encryptedOutput');
        const shiftDisplay = document.getElementById('shiftDisplay');
        
        const text = messageInput.value;
        const shift = parseInt(shiftValue.value);
        const encrypted = caesarCipher(text, shift);
        encryptedOutput.textContent = encrypted;
        shiftDisplay.textContent = shift;
        
        stats.messagesEncrypted++;
        updateStats();
    }

    // Medidor de fortaleza de contrase√±as
    function checkPasswordStrength(password) {
        let score = 0;
        let strength = '';
        let color = '';

        // Criterios
        const criteria = {
            length: password.length >= 8,
            upper: /[A-Z]/.test(password),
            lower: /[a-z]/.test(password),
            number: /[0-9]/.test(password),
            special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
        };

        // Actualizar tips visuales
        Object.keys(criteria).forEach(key => {
            const element = document.getElementById(`tip-${key}`);
            if (element) {
                element.className = criteria[key] ? 'tip-item valid' : 'tip-item';
            }
        });

        // Calcular puntuaci√≥n
        score = Object.values(criteria).filter(Boolean).length;

        if (password.length === 0) {
            strength = 'Ingresa una contrase√±a';
            color = '#e2e8f0';
        } else if (score <= 2) {
            strength = 'üî¥ Muy d√©bil';
            color = '#f56565';
        } else if (score === 3) {
            strength = 'üü° D√©bil';
            color = '#ed8936';
        } else if (score === 4) {
            strength = 'üü¢ Fuerte';
            color = '#48bb78';
        } else {
            strength = 'üü¢ Muy fuerte';
            color = '#38a169';
        }

        const strengthBar = document.getElementById('strengthBar');
        const strengthText = document.getElementById('strengthText');
        
        strengthBar.style.width = `${(score / 5) * 100}%`;
        strengthBar.style.backgroundColor = color;
        strengthText.textContent = strength;
        strengthText.style.color = color;

        if (password.length > 0) {
            stats.passwordsChecked++;
            updateStats();
        }
    }

    // Generador de contrase√±as
    function generateSecurePassword() {
        const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()';
        let password = '';
        
        // Asegurar al menos un car√°cter de cada tipo
        password += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[Math.floor(Math.random() * 26)];
        password += 'abcdefghijklmnopqrstuvwxyz'[Math.floor(Math.random() * 26)];
        password += '0123456789'[Math.floor(Math.random() * 10)];
        password += '!@#$%^&*()'[Math.floor(Math.random() * 10)];
        
        // Rellenar hasta 12 caracteres
        for (let i = 4; i < 12; i++) {
            password += chars[Math.floor(Math.random() * chars.length)];
        }
        
        // Mezclar caracteres
        return password.split('').sort(() => Math.random() - 0.5).join('');
    }

    // Hash functions (simuladas)
    async function simpleHash(str, algorithm = 'MD5') {
        const encoder = new TextEncoder();
        const data = encoder.encode(str);
        
        if (algorithm === 'SHA-256') {
            const hashBuffer = await crypto.subtle.digest('SHA-256', data);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        } else {
            // Simulaci√≥n simple de MD5 (no real)
            let hash = 0;
            for (let i = 0; i < str.length; i++) {
                const char = str.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash = hash & hash;
            }
            return Math.abs(hash).toString(16).padStart(8, '0').repeat(4).substring(0, 32);
        }
    }

    async function updateHashes() {
        const hashInput = document.getElementById('hashInput');
        const md5Output = document.getElementById('md5Output');
        const sha256Output = document.getElementById('sha256Output');
        
        const text = hashInput.value;
        if (text) {
            const md5Hash = await simpleHash(text, 'MD5');
            const sha256Hash = await simpleHash(text, 'SHA-256');
            
            md5Output.textContent = md5Hash;
            sha256Output.textContent = sha256Hash;
            
            stats.hashesGenerated++;
            updateStats();
        }
    }

    // Base64 encoding/decoding
    function updateBase64Encode() {
        const text = document.getElementById('base64Input').value;
        const encoded = btoa(unescape(encodeURIComponent(text)));
        document.getElementById('base64Output').textContent = encoded;
    }

    function updateBase64Decode() {
        const encoded = document.getElementById('base64DecodeInput').value;
        try {
            const decoded = decodeURIComponent(escape(atob(encoded)));
            document.getElementById('base64DecodeOutput').textContent = decoded;
        } catch (e) {
            document.getElementById('base64DecodeOutput').textContent = 'Error: Base64 inv√°lido';
        }
    }

    // Quiz functions
    function loadQuestion() {
        const question = quizQuestions[currentQuestion];
        document.getElementById('quizQuestion').textContent = question.question;
        document.getElementById('questionCounter').textContent = `${currentQuestion + 1} / ${quizQuestions.length}`;
        
        const optionsContainer = document.getElementById('quizOptions');
        optionsContainer.innerHTML = '';
        
        question.options.forEach((option, index) => {
            const button = document.createElement('button');
            button.className = 'quiz-option';
            button.textContent = option;
            button.onclick = () => selectAnswer(index);
            optionsContainer.appendChild(button);
        });
        
        document.getElementById('quizResult').innerHTML = '';
        
        // Update navigation buttons
        document.getElementById('prevQuestion').disabled = currentQuestion === 0;
        document.getElementById('nextQuestion').textContent = 
            currentQuestion === quizQuestions.length - 1 ? 'Finalizar Quiz' : 'Siguiente ‚û°Ô∏è';
    }

    function selectAnswer(answerIndex) {
        userAnswers[currentQuestion] = answerIndex;
        const question = quizQuestions[currentQuestion];
        const resultDiv = document.getElementById('quizResult');
        
        if (answerIndex === question.correct) {
            resultDiv.innerHTML = `<div class="correct">‚úÖ ¬°Correcto! ${question.explanation}</div>`;
        } else {
            resultDiv.innerHTML = `<div class="incorrect">‚ùå Incorrecto. ${question.explanation}</div>`;
        }
        
        // Highlight selected option
        const options = document.querySelectorAll('.quiz-option');
        options.forEach((option, index) => {
            option.classList.remove('selected', 'correct', 'incorrect');
            if (index === answerIndex) {
                option.classList.add('selected');
                option.classList.add(index === question.correct ? 'correct' : 'incorrect');
            } else if (index === question.correct) {
                option.classList.add('correct');
            }
        });
    }

    function nextQuestion() {
        if (currentQuestion < quizQuestions.length - 1) {
            currentQuestion++;
            loadQuestion();
        } else {
            finishQuiz();
        }
    }

    function prevQuestion() {
        if (currentQuestion > 0) {
            currentQuestion--;
            loadQuestion();
        }
    }

    function finishQuiz() {
        let correct = 0;
        userAnswers.forEach((answer, index) => {
            if (answer === quizQuestions[index].correct) correct++;
        });
        
        stats.quizCorrect = correct;
        stats.quizTotal = quizQuestions.length;
        
        const percentage = Math.round((correct / quizQuestions.length) * 100);
        
        document.getElementById('quizScore').innerHTML = `
            <div class="final-score">
                <h3>üéâ Quiz Completado</h3>
                <p>Puntuaci√≥n: ${correct}/${quizQuestions.length} (${percentage}%)</p>
                <button onclick="restartQuiz()" class="quiz-btn primary">üîÑ Intentar de nuevo</button>
            </div>
        `;
        
        updateStats();
    }

    function restartQuiz() {
        currentQuestion = 0;
        userAnswers = [];
        document.getElementById('quizScore').innerHTML = '';
        loadQuestion();
    }

    // Update statistics
    function updateStats() {
        document.getElementById('messagesEncrypted').textContent = stats.messagesEncrypted;
        document.getElementById('passwordsChecked').textContent = stats.passwordsChecked;
        document.getElementById('hashesGenerated').textContent = stats.hashesGenerated;
        
        if (stats.quizTotal > 0) {
            const percentage = Math.round((stats.quizCorrect / stats.quizTotal) * 100);
            document.getElementById('quizScoreDisplay').textContent = `${percentage}%`;
        }
    }

    // Copy to clipboard function
    function copyToClipboard(text) {
        navigator.clipboard.writeText(text).then(() => {
            // Show temporary feedback
            const notification = document.createElement('div');
            notification.className = 'copy-notification';
            notification.textContent = '¬°Copiado!';
            document.body.appendChild(notification);
            
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 2000);
        });
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', function() {
        // Caesar cipher
        const messageInput = document.getElementById('messageInput');
        const shiftValue = document.getElementById('shiftValue');
        messageInput.addEventListener('input', updateCaesarCipher);
        shiftValue.addEventListener('input', updateCaesarCipher);
        
        // Password strength
        const passwordInput = document.getElementById('passwordInput');
        passwordInput.addEventListener('input', () => {
            checkPasswordStrength(passwordInput.value);
        });
        
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', () => {
            const type = passwordInput.type === 'password' ? 'text' : 'password';
            passwordInput.type = type;
            document.getElementById('togglePassword').textContent = type === 'password' ? 'üëÅÔ∏è' : 'üôà';
        });
        
        // Generate password
        document.getElementById('generatePassword').addEventListener('click', () => {
            const newPassword = generateSecurePassword();
            passwordInput.value = newPassword;
            checkPasswordStrength(newPassword);
        });
        
        // Hash updates
        const hashInput = document.getElementById('hashInput');
        hashInput.addEventListener('input', updateHashes);
        
        // Base64
        document.getElementById('base64Input').addEventListener('input', updateBase64Encode);
        document.getElementById('base64DecodeInput').addEventListener('input', updateBase64Decode);
        
        // Base64 tabs
        document.getElementById('encodeTab').addEventListener('click', () => {
            document.getElementById('encodeTab').classList.add('active');
            document.getElementById('decodeTab').classList.remove('active');
            document.getElementById('encodePanel').classList.add('active');
            document.getElementById('decodePanel').classList.remove('active');
        });
        
        document.getElementById('decodeTab').addEventListener('click', () => {
            document.getElementById('decodeTab').classList.add('active');
            document.getElementById('encodeTab').classList.remove('active');
            document.getElementById('decodePanel').classList.add('active');
            document.getElementById('encodePanel').classList.remove('active');
        });
        
        // Quiz navigation
        document.getElementById('nextQuestion').addEventListener('click', nextQuestion);
        document.getElementById('prevQuestion').addEventListener('click', prevQuestion);
        
        // Copy buttons
        document.getElementById('copyEncrypted').addEventListener('click', () => {
            const encryptedOutput = document.getElementById('encryptedOutput');
            copyToClipboard(encryptedOutput.textContent);
        });
        
        document.querySelectorAll('.copy-btn-small').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const targetId = e.target.getAttribute('data-target');
                const text = document.getElementById(targetId).textContent;
                copyToClipboard(text);
            });
        });
        
        // Initialize
        updateCaesarCipher();
        updateBase64Encode();
        updateHashes();
        loadQuestion();
        updateStats();
    });

    // Make functions global for onclick handlers
    window.restartQuiz = restartQuiz;
</script>

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    
    .crypto-interactive-page {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        color: #333;
    }
    
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }
    
    .header {
        text-align: center;
        margin-bottom: 40px;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 30px;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .header h1 {
        font-size: 3em;
        color: white;
        margin-bottom: 10px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    
    .header p {
        font-size: 1.2em;
        color: rgba(255, 255, 255, 0.9);
    }
    
    .section {
        background: white;
        border-radius: 15px;
        padding: 30px;
        margin-bottom: 30px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .section:hover {
        transform: translateY(-3px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
    }
    
    .section-title {
        font-size: 2em;
        color: #4a5568;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 15px;
    }
    
    .icon {
        font-size: 1.2em;
        padding: 10px;
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Tools Styling */
    .crypto-tool, .password-tool, .hash-tool, .base64-tool {
        display: grid;
        gap: 20px;
    }

    .input-group, .output-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .input-group label, .output-group label {
        font-weight: 600;
        color: #4a5568;
    }

    textarea, input[type="text"], input[type="password"] {
        padding: 12px;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        font-size: 16px;
        transition: border-color 0.3s ease;
        resize: vertical;
        min-height: 60px;
    }

    textarea:focus, input:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .output-box {
        background: #f7fafc;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        padding: 12px;
        font-family: 'Courier New', monospace;
        font-size: 14px;
        min-height: 60px;
        word-break: break-all;
        position: relative;
    }

    .controls {
        display: flex;
        align-items: center;
        gap: 15px;
        background: #f7fafc;
        padding: 15px;
        border-radius: 8px;
    }

    input[type="range"] {
        flex: 1;
    }

    #shiftDisplay {
        background: #667eea;
        color: white;
        padding: 5px 10px;
        border-radius: 20px;
        font-weight: bold;
        min-width: 30px;
        text-align: center;
    }

    /* Password Strength */
    .password-container {
        position: relative;
        display: flex;
    }

    .password-container input {
        flex: 1;
        padding-right: 50px;
    }

    .toggle-btn {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        padding: 5px;
    }

    .strength-meter {
        height: 8px;
        background: #e2e8f0;
        border-radius: 4px;
        overflow: hidden;
        margin: 10px 0;
    }

    .strength-bar {
        height: 100%;
        width: 0%;
        transition: all 0.3s ease;
        border-radius: 4px;
    }

    .strength-text {
        text-align: center;
        font-weight: bold;
        margin-bottom: 15px;
    }

    .password-tips {
        background: #f7fafc;
        border-radius: 8px;
        padding: 15px;
    }

    .password-tips h4 {
        margin-bottom: 10px;
        color: #4a5568;
    }

    .password-tips ul {
        list-style: none;
        padding: 0;
    }

    .tip-item {
        padding: 5px 0;
        color: #718096;
        transition: color 0.3s ease;
    }

    .tip-item.valid {
        color: #38a169;
        font-weight: 600;
    }

    .tip-item.valid::before {
        content: "‚úÖ ";
    }

    .tip-item:not(.valid)::before {
        content: "‚≠ï ";
    }

    /* Buttons */
    .copy-btn, .generate-btn, .quiz-btn {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .copy-btn:hover, .generate-btn:hover, .quiz-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
    }

    .copy-btn-small {
        background: #667eea;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        font-size: 12px;
        cursor: pointer;
        position: absolute;
        top: 10px;
        right: 10px;
        transition: all 0.2s ease;
    }

    .copy-btn-small:hover {
        background: #5a67d8;
        transform: scale(1.1);
    }

    .quiz-btn.secondary {
        background: #e2e8f0;
        color: #4a5568;
    }

    .quiz-btn.secondary:hover {
        background: #cbd5e0;
    }

    .quiz-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        transform: none !important;
    }

    /* Quiz Styling */
    .quiz-container {
        max-width: 600px;
        margin: 0 auto;
    }

    .quiz-question {
        font-size: 1.2em;
        font-weight: 600;
        margin-bottom: 20px;
        color: #2d3748;
        text-align: center;
    }

    .quiz-options {
        display: grid;
        gap: 10px;
        margin-bottom: 20px;
    }

    .quiz-option {
        background: white;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        padding: 15px;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: left;
    }

    .quiz-option:hover {
        border-color: #667eea;
        background: #f7fafc;
    }

    .quiz-option.selected {
        border-width: 3px;
    }

    .quiz-option.correct {
        border-color: #38a169;
        background: #f0fff4;
    }

    .quiz-option.incorrect {
        border-color: #e53e3e;
        background: #fff5f5;
    }

    .quiz-result {
        margin: 20px 0;
        text-align: center;
    }

    .correct {
        color: #38a169;
        background: #f0fff4;
        padding: 15px;
        border-radius: 8px;
        border: 2px solid #38a169;
    }

    .incorrect {
        color: #e53e3e;
        background: #fff5f5;
        padding: 15px;
        border-radius: 8px;
        border: 2px solid #e53e3e;
    }

    .quiz-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 20px 0;
    }

    .question-counter {
        background: #667eea;
        color: white;
        padding: 8px 16px;
        border-radius: 20px;
        font-weight: 600;
    }

    .quiz-score {
        margin-top: 20px;
    }

    .final-score {
        text-align: center;
        background: linear-gradient(45deg, #38a169, #48bb78);
        color: white;
        padding: 30px;
        border-radius: 15px;
    }

    .final-score h3 {
        font-size: 2em;
        margin-bottom: 15px;
    }

    .final-score p {
        font-size: 1.2em;
        margin-bottom: 20px;
    }

    /* Hash Tool */
    .hash-outputs {
        display: grid;
        gap: 15px;
    }

    .hash-result {
        position: relative;
    }

    .hash-output {
        background: #1a202c;
        color: #68d391;
        border: none;
        font-family: 'Courier New', monospace;
        font-size: 12px;
        padding: 15px 50px 15px 15px;
        border-radius: 8px;
        word-break: break-all;
        line-height: 1.5;
    }

    .hash-info {
        background: linear-gradient(45deg, #bee3f8, #90cdf4);
        padding: 15px;
        border-radius: 8px;
        margin-top: 15px;
    }

    .hash-info p {
        margin: 0;
        color: #2c5282;
    }

    /* Base64 Tool */
    .tool-tabs {
        display: flex;
        margin-bottom: 20px;
        background: #f7fafc;
        border-radius: 8px;
        padding: 5px;
    }

    .tab-btn {
        flex: 1;
        background: none;
        border: none;
        padding: 12px;
        border-radius: 4px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        color: #718096;
    }

    .tab-btn.active {
        background: #667eea;
        color: white;
    }

    .tab-panel {
        display: none;
    }

    .tab-panel.active {
        display: block;
    }

    /* Statistics */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .stat-card {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        text-align: center;
        padding: 25px;
        border-radius: 15px;
        transition: transform 0.3s ease;
    }

    .stat-card:hover {
        transform: scale(1.05);
    }

    .stat-number {
        font-size: 2.5em;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .stat-label {
        font-size: 1.1em;
        opacity: 0.9;
    }

    /* Copy notification */
    .copy-notification {
        position: fixed;
        top: 20px;
        right: 20px;
        background: #38a169;
        color: white;
        padding: 10px 20px;
        border-radius: 8px;
        z-index: 1000;
        animation: slideInRight 0.3s ease, fadeOut 0.3s ease 1.7s forwards;
    }

    @keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    @keyframes fadeOut {
        to {
            opacity: 0;
            transform: translateX(100%);
        }
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .header h1 {
            font-size: 2em;
        }
        
        .section {
            padding: 20px;
        }
        
        .section-title {
            font-size: 1.5em;
        }
        
        .controls {
            flex-direction: column;
            align-items: stretch;
        }
        
        .quiz-controls {
            flex-direction: column;
            gap: 15px;
        }
        
        .stats-grid {
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        }
        
        .stat-number {
            font-size: 2em;
        }
        
        .copy-btn-small {
            position: static;
            margin-top: 10px;
            width: 100%;
        }
        
        .hash-output {
            font-size: 10px;
            padding: 10px;
        }
        
        .final-score h3 {
            font-size: 1.5em;
        }
    }

    @media (max-width: 480px) {
        .container {
            padding: 10px;
        }
        
        .header {
            padding: 20px;
        }
        
        .section {
            padding: 15px;
        }
        
        .stats-grid {
            grid-template-columns: 1fr;
        }
    }